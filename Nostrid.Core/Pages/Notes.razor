@page "/note/{eventId}"
@page "/note/{eventId}/{childIndex:int}"
@implements IDisposable

@code {
    [Parameter, EditorRequired]
    public string EventId { get; set; } = null!;

    [Parameter, EditorRequired]
    public int ChildIndex { get; set; }
}

@using Nostrid.Data
@using Nostrid.Data.Relays;
@using Nostrid.Interfaces;
@using Nostrid.Model;
@using Nostrid.Misc;
@using System.Collections.Concurrent;
@inject FeedService feedService
@inject RelayService relayService

<div class="fs-4 fw-bolder">Thread</div>

@if (noteTrees.Any())
{
    @if (noteNotFound)
    {
        <div class="text-secondary mb-2">
            <i class="bi bi-exclamation-triangle-fill"></i>
            <span>Thread not fully visible. Wait, or rotate the relays.</span>
        </div>
    }
}

<UpdatabableElement @ref="content">
    @if (!noteTrees.Any())
    {
        <div class="text-center px-3 py-2 border-top" style="margin: 0 -1rem;">
            <div class="spinner-border mx-3 my-2" role="status">
                <span class="visually-hidden">Waiting for feed...</span>
            </div>
        </div>
    }
    else
    {
        <div style="margin-bottom: -1rem;">
            <NoteTreeViewer Trees="@noteTrees" MainEventId="@EventId" ChildIndex="@ChildIndex" NotClickable="true" />
        </div>
    }
</UpdatabableElement>

@code {
    private List<NoteTree> noteTrees = new();
    private bool noteNotFound;
    private string? standardRootId, replaceableRootId;
    private UpdatabableElement? content;

    private CancellationTokenSource cancellationTokenSource = new();


    private static readonly object lockTree = new();

    protected override void OnParametersSet()
    {
        Cleanup();

        if (ByteTools.TryDecodeTvlBech32(EventId, out var tvlEntity))
        {
            EventId = tvlEntity switch
            {
                Nevent nevent => nevent.EventId,
                Naddr naddr => naddr.ReplaceableId,
                _ => EventId,
            };
        }

        cancellationTokenSource = new();

        feedService.NotesReceived += ReceivedNotes;

        noteTrees = new();
        noteNotFound = false;

        Task.Run(() =>
        {
            feedService.AddDetailsNeeded(EventId);
            var notes = feedService.GetNotesThread(EventId, out standardRootId, out replaceableRootId);
            TruncateTreeIfNeeded(notes);
            InvokeAsync(() => StateHasChanged());
        },
        cancellationTokenSource.Token);
    }

    private void TruncateTreeIfNeeded(IEnumerable<Event> newNotes)
    {
        lock (lockTree)
        {
            feedService.GetTreesFromNotes(newNotes, noteTrees);

            //var requestedNode = noteTrees.Find(EventId, out var maxExceeded, NoteViewer.MaxChildren);
            //noteNotFound = requestedNode == null;
            //if (requestedNode != null && (maxExceeded || requestedNode.RenderLevel >= NoteViewer.MaxNestingLevel || ChildIndex > 0))
            //{
            //    noteTrees = new List<NoteTree>() { requestedNode };
            //}

            var requestedNode = noteTrees.Find(EventId);
            if (requestedNode != null)
            {
                // Let's back up MaxNestingLevel/2 or until the node is no longer visible
                for (int i = 0; i < NoteViewer.MaxNestingLevel / 2 && requestedNode.Parent != null; i++)
                {
                    if (requestedNode.Parent.Find(EventId, out var maxExceeded, ChildIndex, NoteViewer.MaxChildren) == null || maxExceeded)
                        break;
                    requestedNode = requestedNode.Parent;
                }
                noteTrees = new List<NoteTree>() { requestedNode };
            }
        }
    }

    private void ReceivedNotes(object? sender, (string _, IEnumerable<Event> events) data)
    {
        Task.Run(() =>
        {
            int[] validRootKinds = new[] { NostrKind.Text, NostrKind.LongContent, NostrKind.Badge };
            int[] validChildKinds = new[] { NostrKind.Text };

            if (standardRootId == null && replaceableRootId == null)
            {
                var note = data.events.Where(e =>
                    ((validRootKinds.Contains(e.Kind)  && (e.Id == EventId || e.ReplaceableId == EventId)) ||
                     (validChildKinds.Contains(e.Kind) && (e.ReplyToRootId == EventId || e.ReplyToId == EventId)))
                    ).FirstOrDefault();
                if (note == null)
                {
                    return;
                }
                if (note.ReplyToRootId.IsNullOrEmpty())
                {
                    standardRootId = note.Id;
                    replaceableRootId = note.ReplaceableId;
                }
                else if (note.ReplyToRootId.IsReplaceableId())
                {
                    standardRootId = null;
                    replaceableRootId = note.ReplyToRootId;
                }
                else
                {
                    standardRootId = note.ReplyToRootId;
                    replaceableRootId = null;
                }
            }

            List<Event> notesToAdd = new();
            if (standardRootId.IsNotNullOrEmpty())
            {
                notesToAdd = data.events
                .Where(e => (validRootKinds.Contains(e.Kind) && e.Id == standardRootId) || (validChildKinds.Contains(e.Kind) && e.ReplyToRootId == standardRootId))
                .ToList();
            }

            if (replaceableRootId.IsNotNullOrEmpty())
            {
                var alreadyLoadedEvents = notesToAdd.Select(e => e.Id).ToList();
                notesToAdd.AddRange(data.events
                .Where(e => !alreadyLoadedEvents.Contains(e.Id))
                .Where(e => (validRootKinds.Contains(e.Kind) && e.ReplaceableId == replaceableRootId) || (validChildKinds.Contains(e.Kind) && e.ReplyToRootId == replaceableRootId))
                );
            }
            if (!notesToAdd.Any())
            {
                return;
            }

            TruncateTreeIfNeeded(notesToAdd);

            content?.Update();
        },
        cancellationTokenSource.Token);
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        feedService.NotesReceived -= ReceivedNotes;
        feedService.RemoveDetailsNeeded(EventId);
        cancellationTokenSource.Cancel();
    }
    #endregion

}
