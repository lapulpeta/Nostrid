@page "/account/{pubKey}"
@implements IDisposable

@code {
    [Parameter, EditorRequired]
    public string PubKey { get; set; } = null!;
}

@using Nostrid.Data;
@using Nostrid.Data.Relays;
@using Nostrid.Interfaces;
@using Nostrid.Model;
@using Nostrid.Misc;
@using System.Collections.Concurrent;
@inject AccountService accountService
@inject RelayService relayService
@inject IClipboardService clipboardService
@inject EventDatabase eventDatabase
@inject NavigationManager navigationManager

<h1 class="visually-hidden"></h1>
<div class="mx--3 px-3 pt-3" style="margin-top: -1rem; height: 128px; transition: background-color .2s ease-in-out; background-color: @(backgroundColor ?? "rgba(var(--bs-secondary-bg-rgb),var(--bs-bg-opacity))")!important;"></div>
<div class="d-flex flex-row" style="height: 69px">
    <div>
        <div class="border border-5 rounded-999 d-inline-block translate-middle-y" style="border-color: rgb(var(--bs-body-bg-rgb)) !important;">
            <AccountPicture Id="@account?.Id" Size="128" OnLoad="OnAccountPictureLoad" />
        </div>
    </div>
    <div class="d-flex flex-row align-items-start justify-content-end flex-grow-1 pt-3" style="margin-right: -.5rem;">
        @if (IsMainAccountLoaded && IsMainAccount)
        {
            <a role="button" @onclick:stopPropagation="true" class="btn btn-outline-secondary mb-2 me-2" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="bi bi-three-dots-vertical"></i>
            </a>
            <ul class="dropdown-menu">
                <li><a role="button" class="dropdown-item" @onclick="@ReloadFollows" @onclick:stopPropagation="true">Reload follows</a></li>
                <li><a role="button" class="dropdown-item" @onclick="@(() => navigationManager.NavigateTo("follows"))" @onclick:stopPropagation="true">Edit follows</a></li>
                <li><a role="button" class="dropdown-item" @onclick="@DeleteAccount" @onclick:stopPropagation="true">Delete account</a></li>
            </ul>
        }
        <PayButton Id="@account?.Id">
            <button type="button" class="btn btn-outline-secondary mb-2 me-2" @onclick="@(() => payModal?.Show(account?.Id))">
                <i class="bi bi-lightning-charge"></i>
                <span class="d-none d-sm-inline">Pay</span>
            </button>
        </PayButton>
        @if (IsMainAccountLoaded && !IsMainAccount)
        {
            <MuteButton AccountId="@PubKey" Css="mb-2 me-2" />
            <a class="btn btn-outline-secondary mb-2 me-2" href="/dm/@PubKey">
                <i class="bi bi-envelope"></i>
                <span class="d-none d-sm-inline">Message</span>
            </a>
            <FollowButton AccountId="@PubKey" Css="mb-2 me-2" />
        }
        @if (IsMainAccountLoaded && IsMainAccount)
        {
            <button class="btn btn-primary mb-2 me-2" @onclick="@(() => editAccountModal?.Show())">
                Edit profile
            </button>
        }
    </div>
</div>
<div class="fs-4 fw-bolder"><AccountName Id="@account?.Id" /></div>
<div class="fs-7 text-body-tertiary text-break mb-3">
    <span class="d-none d-sm-inline-block">@ByteTools.PubkeyToNpub(PubKey)</span>
    <span class="d-sm-none">@ByteTools.PubkeyToNpub(PubKey, true)</span>
    <div class="btn-group">
        <a role="button" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-2 fs-6 text-secondary rounded-5 bg-primary-opacity-10-hover" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-files"></i>
        </a>
        <ul class="dropdown-menu">
            <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(ByteTools.PubkeyToNpub(PubKey)))" @onclick:stopPropagation="true">Copy Npub</a></li>
            <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(PubKey))" @onclick:stopPropagation="true">Copy Hex</a></li>
        </ul>
    </div>
</div>
<AccountAbout Id="@account?.Id" />
<div class="border-bottom mx--3 px-3">
    <div class="btn-group me-3 mb-3" role="group" aria-label="First group">
        <button type="button" class="btn btn-outline-secondary" @onclick="OpenFollowsModal">
            Following <span class="badge text-bg-secondary"><FollowsCounter AccountId="@PubKey" /></span>
        </button>
        <button type="button" class="btn btn-outline-secondary" @onclick="OpenFollowersModal">
            Followers <span class="badge text-bg-secondary"><FollowsCounter AccountId="@PubKey" CountFollowers="true" /></span>
        </button>
    </div>
</div>
<AccountFeed AccountId="@PubKey" />

<ModalContainer @ref="followsModal">
    <div class="modal fade" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-fullscreen-sm-down modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Following</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-0">
                    @if (follows == null)
                    {
                        <div class="text-center my-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Waiting for feed...</span>
                            </div>
                        </div>
                    }
                    else if (follows?.Count == 0)
                    {
                        <div class="p-3 h-100 d-flex flex-column align-items-center justify-content-center text-center">
                            <i class="fs-1 bi bi-person-x"></i>
                            @if (IsMainAccount)
                            {
                                <p class="fw-bold">No follows yet.</p>
                                <p>If you recently restored your account then your follows may take a few minutes to be discovered.</p>
                            }
                            else
                            {
                                <p class="fw-bold">No follows to show.</p>
                            }
                        </div>
                    }
                    @foreach (var following in follows ?? new List<string>())
                    {
                        <FollowAccount AccountId="@following"></FollowAccount>
                    }
                </div>
            </div>
        </div>
    </div>
</ModalContainer>

<ModalContainer @ref="followersModal">
    <div class="modal fade" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-fullscreen-sm-down modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Followers</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-0">
                    @if (followers == null)
                    {
                        <div class="text-center my-5">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Waiting for feed...</span>
                            </div>
                        </div>
                    }
                    else if (followers?.Count == 0)
                    {
                        <div class="p-3 h-100 d-flex flex-column align-items-center justify-content-center text-center">
                            <i class="fs-1 bi bi-person-x"></i>
                            @if (IsMainAccount)
                            {
                                <p class="fw-bold">No followers yet.</p>
                                <p>If you recently restored your account then your followers may take a few minutes to be discovered.</p>
                            }
                            else
                            {
                                <p class="fw-bold">No followers to show.</p>
                            }
                        </div>
                    }
                    @foreach (var follower in followers ?? new List<string>())
                    {
                        <FollowAccount AccountId="@follower"></FollowAccount>
                    }
                </div>
            </div>
        </div>
    </div>
</ModalContainer>

<PayModal @ref="payModal" />
<EditAccountModal @ref="editAccountModal" AccountId="@account?.Id" />
<ConfirmationModal @ref="confirmationModal" />

@code {
    private Account? account;
    private SubscriptionFilter? followsFilter, followersFilter;
    private PayModal? payModal;
    private EditAccountModal? editAccountModal;
    private ConfirmationModal? confirmationModal;
    private ModalContainer? followsModal, followersModal;
    private List<string>? follows, followers;
    private int followsInitialCount, followersInitialCount;
    private Task? updateAfterChange;
    private const int StateHasChangedAfterSeconds = 3;
    private string? backgroundColor = null;

    private bool IsMainAccountLoaded => accountService.MainAccount != null;
    private bool IsMainAccount => IsMainAccountLoaded && PubKey == accountService.MainAccount?.Id;
    private bool previousIsMainAccountLoaded;
    private bool previousIsMainAccount;


    protected override void OnParametersSet()
    {
        Cleanup();
        followsModal?.Hide();
        followersModal?.Hide();
        backgroundColor = null;

        account = accountService.GetAccount(PubKey);

        relayService.AddFilters(followsFilter = new FollowsAndDetailsSubscriptionFilter(PubKey));
        relayService.AddFilters(followersFilter = new FollowersSubscriptionFilter(PubKey) { DontSaveInLocalCache = true });
        accountService.RegisterFollowerRequestFilter(followersFilter.Id, PubKey);

        accountService.AccountFollowsChanged += AccountFollowsChanged;
        accountService.AccountFollowersChanged += AccountFollowersChanged;
        accountService.MainAccountChanged += MainAccountChanged;

        follows = null;
        followers = null;
        followsInitialCount = eventDatabase.GetFollowCount(PubKey);
        followersInitialCount = eventDatabase.GetFollowerCount(PubKey);

        previousIsMainAccountLoaded = IsMainAccountLoaded;
        previousIsMainAccount = IsMainAccount;
    }

    private void ReloadFollows()
    {
        follows = null;
        eventDatabase.ClearFollows(PubKey);
        relayService.DeleteFilters(followsFilter);
        relayService.AddFilters(followsFilter = new FollowsAndDetailsSubscriptionFilter(PubKey));
    }

    private void DeleteAccount()
    {
        confirmationModal?.Show(ConfirmationModal.Options.Create(
            "Are you sure you want to delete this account?",
            "Delete account",
            ConfirmationModal.Options.Button.CreateNoButton(),
            ConfirmationModal.Options.Button.CreateYesButton(() =>
            {
                accountService.SetMainAccount(null, null);
                accountService.RemoveSigner(account.Id);
                eventDatabase.DeleteAccount(account);
                navigationManager.NavigateTo("/");
            }, "btn-danger")));
    }

    private static object lockobj = new();

    private void AccountFollowsChanged(object? sender, (string accountId, List<string> follows) data)
    {
        if (disposed)
            return;
        if (data.accountId != PubKey)
            return;
        if (followsModal != null && followsModal.IsVisible())
        {
            lock (lockobj)
            {
                if (updateAfterChange != null)
                    return;
                updateAfterChange = Task.Delay(TimeSpan.FromSeconds(StateHasChangedAfterSeconds)).ContinueWith((_) =>
                {
                    updateAfterChange = null;
                    var newFollows = eventDatabase.GetFollowIds(PubKey);
                    if (follows != null && Enumerable.SequenceEqual(newFollows.OrderBy(e => e), follows.OrderBy(e => e)))
                        return;
                    follows = newFollows;
                    InvokeAsync(() => StateHasChanged());
                });
            }
        }
    }

    private void AccountFollowersChanged(object? sender, string accountId)
    {
        if (disposed)
            return;
        if (accountId != PubKey)
            return;
        if (followersModal != null && followersModal.IsVisible())
        {
            lock (lockobj)
            {
                if (updateAfterChange != null)
                    return;
                updateAfterChange = Task.Delay(TimeSpan.FromSeconds(StateHasChangedAfterSeconds)).ContinueWith((_) =>
                {
                    updateAfterChange = null;
                    var newFollowers = eventDatabase.GetFollowerIds(accountId);
                    if (followers != null && Enumerable.SequenceEqual(newFollowers.OrderBy(e => e), followers.OrderBy(e => e)))
                        return;
                    followers = newFollowers;
                    InvokeAsync(() => StateHasChanged());
                });
            }
        }
    }

    private void OpenFollowsModal()
    {
        Task.Run(() =>
        {
            if (follows == null)
            {
                follows = eventDatabase.GetFollowIds(PubKey);
                InvokeAsync(() => StateHasChanged());
            }
        });
        followsModal?.Show();
    }

    private void OpenFollowersModal()
    {
        Task.Run(() =>
        {
            if (followers == null)
            {
                followers = eventDatabase.GetFollowerIds(PubKey);
                InvokeAsync(() => StateHasChanged());
            }
        });
        followersModal?.Show();
    }

    private void OnAccountPictureLoad(string? rgb)
    {
        backgroundColor = !string.IsNullOrEmpty(rgb) ? $"rgba({rgb},0.75)" : null;
    }

    private void MainAccountChanged(object? sender, EventArgs args)
    {
        if (disposed) return;
        if (previousIsMainAccountLoaded != IsMainAccountLoaded
             || (IsMainAccountLoaded && previousIsMainAccount != IsMainAccount))
        {
            InvokeAsync(StateHasChanged);            
        }
        previousIsMainAccountLoaded = IsMainAccountLoaded;
        previousIsMainAccount = IsMainAccount;
    }

    #region Dispose
    private bool disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            disposed = true;
        }
    }

    private void Cleanup()
    {
        accountService.AccountFollowsChanged -= AccountFollowsChanged;
        accountService.AccountFollowersChanged -= AccountFollowersChanged;
        accountService.MainAccountChanged -= MainAccountChanged;
        relayService.DeleteFilters(followsFilter, followersFilter);
        if (followersFilter != null)
            accountService.UnregisterFollowerRequestFilter(followersFilter.Id);
    }
    #endregion
}
