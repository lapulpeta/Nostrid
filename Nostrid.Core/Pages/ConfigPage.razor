@page "/config"
@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;
@using System.Collections.Concurrent;

@inject ConfigService configService
@inject RelayService relayService
@inject EventDatabase eventDatabase
@inject AccountService accountService
@inject FeedService feedService

@implements IDisposable

@code{
    [CascadingParameter]
    public Scripts? Scripts { get; set; }
}

<h2 class="mb-0">Options</h2>

<ConfigSection @ref="ConfigSectionRef" ConfigSections="configSections">
    <Header>
        <h5 class="my-2">Proof of Work Configuration (NIP-13)</h5>
    </Header>
    <Body>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-6" for="switchShowDifficulty">
                    Display difficulty of notes
                </label>
                <div class="col-6 text-right">
                    <div class="form-check form-switch m-0 p-0 fs-4">
                        <input type="checkbox" class="form-check-input m-0 float-end" role="switch" id="switchShowDifficulty"
                                checked="@configModel.ShowDifficulty"
                                @onchange="@(args => { configModel.ShowDifficulty = args.Value as bool? ?? false; Save(); })" />
                    </div>
                </div>
            </div>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-lg-6" for="rangeMinimumPow">
                    Minimum difficulty to accept notes
                    <span class="d-block text-secondary">To accept all set to 0</span>
                </label>
                <div class="col-lg-6">
                    <div class="d-flex">
                        <span class="me-3 badge text-bg-light">@configModel.MinDiffIncoming</span>
                        <input type="range" class="form-range" min="0" max="50" step="1" id="rangeMinimumPow"
                                @bind-value="@configModel.MinDiffIncoming" @bind-value:event="oninput" @onchange="@Save" />
                    </div>
                </div>
            </div>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-6" for="switchPowCheck">
                    Strict PoW check
                    <span class="d-block text-secondary">Notes must explicitly indicate difficulty target</span>
                </label>
                <div class="col-6 text-right">
                    <div class="form-check form-switch m-0 p-0 fs-4">
                        <input type="checkbox" class="form-check-input m-0 float-end" role="switch" id="switchPowCheck"
                                checked="@configModel.StrictDiffCheck"
                                @onchange="@(args => { configModel.StrictDiffCheck = args.Value as bool? ?? false; Save(); })" />
                    </div>
                </div>
            </div>
        </li>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-lg-6" for="rangeTargetDiff">
                    Difficulty target for sending messages
                    <span class="d-block text-secondary">To disable PoW set to 0</span>
                </label>
                <div class="col-lg-6">
                    <div class="d-flex">
                        <span class="me-3 badge text-bg-light">@configModel.TargetDiffOutgoing</span>
                        <input type="range" class="form-range w-100" min="0" max="255" step="1" id="rangeTargetDiff"
                                @bind-value="@configModel.TargetDiffOutgoing" @bind-value:event="oninput" @onchange="@Save" />
                    </div>
                </div>
            </div>
        </li>
    </Body>
</ConfigSection>

<ConfigSection @ref="ConfigSectionRef" ConfigSections="configSections" AlwaysExpanded="true">
    <Header>
        <h5 class="my-2">Appearance</h5>
    </Header>
    <Body>
        <li class="list-group-item">
            <div class="row align-items-center">
                <label class="col-6" for="switchTheme">
                    <i class="bi bi-moon-fill pe-1" aria-hidden="true"></i>
                    Use dark theme
                </label>
                <div class="col-6 text-right">
                    <div class="form-check form-switch m-0 p-0 fs-4">
                        <input type="checkbox" class="form-check-input m-0 float-end" role="switch" id="switchTheme"
                               checked="@Theme"
                               @onchange="@(args => { Theme = args.Value as bool? ?? false; Save(); })" />
                    </div>
                </div>
            </div>
        </li>
    </Body>
</ConfigSection>

<ConfigSection @ref="ConfigSectionRef" ConfigSections="configSections" AlwaysExpanded="true">
    <Header>
        <h5 class="my-2">Database</h5>
    </Header>
    <Body>
        @if (eventDatabase.IsOptimizing)
        {
            <li class="list-group-item d-flex flex-row align-items-center">
                <div class="spinner-border me-2" role="status"></div>
                <span class="text-secondary">Optimizing database...</span>
            </li>
        }
        else
        {
            <li class="list-group-item">
                <div class="row">
                    <div class="col-8 align-self-center">
                        <span>Optimize database to make it faster</span>
                    </div>
                    <div class="col-4 text-end">
                        <button class="btn btn-primary py-1" @onclick="@(() => eventDatabase.Optimize())">Optimize</button>
                    </div>
                </div>
            </li>
            <li class="list-group-item">
                <div class="row">
                    <div class="col-8 align-self-center">
                        <span>Remove all data except private keys and settings</span>
                    </div>
                    <div class="col-4 text-end">
                        <button class="btn btn-primary py-1" @onclick="@Clean">Clean</button>
                    </div>
                </div>
            </li>
        }
    </Body>
</ConfigSection>

<ConfigSection @ref="ConfigSectionRef" ConfigSections="configSections">
    <Header>
        <h5 class="my-2">Relays</h5>
    </Header>
    <Body>
        @if (relayService.IsRestarting)
        {
            <li class="list-group-item d-flex flex-row align-items-center py-3">
                <div class="spinner-border me-2" role="status"></div>
                <span class="text-secondary">Restarting...</span>
            </li>
        }
        else
        {
            <li class="list-group-item py-3">
                <div class="row">
                    <div class="col-8 align-self-center">
                        <span class="fw-bold">Reset to default list of relays and automatic mode</span>
                    </div>
                    <div class="col-4 text-end">
                        <button class="btn btn-primary py-1" @onclick="@ResetRelays">Reset relays</button>
                    </div>
                </div>
            </li>
            <li class="list-group-item py-3">
                <div class="row">
                    <div class="col-8 align-self-center">
                        <span class="fw-bold">Restart connections to apply any change made below</span>
                    </div>
                    <div class="col-4 text-end">
                        <button class="btn btn-primary py-1" @onclick="() => relayService.RestartNostrClients()">Restart connections</button>
                    </div>
                </div>
            </li>
        }
        <li class="list-group-item py-3">
            <div class="row align-items-center">
                <label class="col-6" for="manualRelayManagement">
                    Manual relay management
                </label>
                <div class="col-6 text-right">
                    <div class="form-check form-switch m-0 p-0 fs-4">
                        <input type="checkbox" class="form-check-input m-0 float-end" role="switch" id="manualRelayManagement"
                               checked="@configModel.ManualRelayManagement"
                               @onchange="@(args => { configModel.ManualRelayManagement = args.Value as bool? ?? false; Save(); })" />
                    </div>
                </div>
            </div>
        </li>
        @if (!configModel.ManualRelayManagement)
        {
            <li class="list-group-item py-3">
                <div class="row align-items-center">
                    <label class="col-sm-6 col-lg-8" for="rangeMaxAutoRelays">
                        Maximum simultaneous relay connections
                    </label>
                    <div class="col-sm-6 col-lg-4">
                        <div class="d-flex">
                            <span class="me-3 badge text-bg-light">@configModel.MaxAutoRelays</span>
                            <input type="range" class="form-range" min="0" max="50" step="1" id="rangeMaxAutoRelays"
                                   @bind-value="@configModel.MaxAutoRelays" @bind-value:event="oninput" @onchange="@Save" />
                        </div>
                    </div>
                </div>
            </li>
        }
        <li class="list-group-item py-3">
            <div class="input-group">
                In the following section you can see all the available relays. The 'Pay' button appears for paid relays
                and will take you to their website to complete the payment. The 'Upload all' button appears for online relays if you
                are logged in, and will push all your data to that relay.
            </div>
        </li>
        <li class="list-group-item py-3">
            <div class="input-group">
                <span class="align-self-center me-3">New Relay</span>
                <InputText class="form-control" placeholder="Relay uri" @bind-Value="@newRelayUri" />
                <button class="btn btn-sm py-1 btn-outline-secondary" type="button" @onclick="@AddNewRelay">Add</button>
            </div>
        </li>
        @foreach (var relay in relays)
        {
            <li class="list-group-item">
                <div class="row g-2 align-items-center">
                    <div class="col-sm-6 col-lg-8">
                        <label>
                            <span class="bi bi-circle-fill @(IsRelayConnected(relay.Id) ? "text-success" : "text-danger")"></span>
                            @relay.Uri
                        </label>
                        @if (relay.IsPaid)
                        {
                            <a class="ms-3 btn btn-sm btn-outline-secondary" href="@Utils.GetRelayMainAddress(relay.Uri)">Pay</a>
                        }
                        @if (accountService.MainAccount != null && canBroadcast && IsRelayConnected(relay.Id))
                        {
                            <a class="ms-3 btn btn-sm btn-outline-secondary" @onclick="@(() => Broadcast(relay.Id))">Upload all</a>
                        }
                    </div>
                    <div class="col-sm-6 col-lg-4 d-flex flex-row">
                        <div class="d-flex flex-row flex-grow-1 align-items-center justify-content-sm-end justify-content-md-end">
                            @if (configModel.ManualRelayManagement)
                            {
                                <div class="form-check form-switch p-0 m-0 me-4 text-nowrap">
                                    <input type="checkbox" class="form-check-input m-0 me-1 fs-4" role="switch"
                                            checked="@relay.Read" id="relayRead@(relay.Id)"
                                            @onchange="@(args => { relay.Read = args.Value as bool? ?? false; SaveRelay(relay); })" />
                                    <label class="form-check-label" for="relayRead@(relay.Id)">Read</label>
                                </div>
                                <div class="form-check form-switch p-0 m-0 me-4 text-nowrap">
                                    <input type="checkbox" class="form-check-input m-0 me-1 fs-4" role="switch"
                                            checked="@relay.Write" id="relayWrite@(relay.Id)"
                                            @onchange="@(args => { relay.Write = args.Value as bool? ?? false; SaveRelay(relay); })" />
                                    <label class="form-check-label" for="relayWrite@(relay.Id)">Write</label>
                                </div>
                            }
                            else
                            {
                                <label class="me-1" for="relayPriority@(relay.Id)">Priority</label>
                                <span class="me-3 badge text-bg-light">@relay.Priority</span>
                                <input class="flex-grow-1 me-4 form-range" type="range" min="0" max="10" step="1" id="relayPriority@(relay.Id)"
                                        @bind-value="@relay.Priority" @bind-value:event="oninput" @onchange="() => SaveRelay(relay)" />
                            }
                        </div>
                        <button type="button" class="btn-close" @onclick="() => DeleteRelay(relay)"></button>
                    </div>
                </div>
            </li>
        }
    </Body>
</ConfigSection>

@if(!Utils.IsWasm())
{
    <ConfigSection @ref="ConfigSectionRef" ConfigSections="configSections">
        <Header>
            <h5 class="my-2">Proxy</h5>
        </Header>
        <Body>
            <li class="list-group-item py-3">
            <div class="row g-2">
                    <div class="col-md-6 align-self-center">
                        <b>Uri</b>
                        <div class="text-secondary">http://server:port, socks5://server:port</div>
                    </div>
                    <div class="col-md-6 align-self-center">
                        <input type="text" class="form-control @(isUriValid ? "" : "is-invalid")"
                            @bind-value="@configModel.ProxyUri"
                            @onfocusout="@(() => isUriValid = string.IsNullOrEmpty(configModel.ProxyUri) || Uri.IsWellFormedUriString(configModel.ProxyUri, UriKind.Absolute))" />
                    </div>
                </div>
            </li>
            <li class="list-group-item py-3">
                <div class="row g-2">
                    <div class="col-md-6 align-self-center fw-bold">Username</div>
                <div class="col-md-6 align-self-center">
                        <InputText class="form-control" @bind-Value="@configModel.ProxyUser" />
                    </div>
                </div>
            </li>
            <li class="list-group-item py-3">
                <div class="row g-2">
                    <div class="col-md-6 align-self-center fw-bold">Password</div>
                <div class="col-md-6 align-self-center">
                        <InputText class="form-control" @bind-Value="@configModel.ProxyPassword" />
                    </div>
                </div>
            </li>
            <li class="list-group-item d-flex flex-column py-3">
            @if (relayService.IsRestarting)
            {
                <div class="d-flex flex-row align-items-center py-1">
                    <div class="spinner-border me-2" role="status"></div>
                    <span class="text-secondary">Restarting...</span>
                </div>
            }
            else
            {
                <button class="btn btn-primary align-self-end" style="min-width: 100px;" @onclick="@SaveAndRestart">Apply</button>
            }
            </li>
        </Body>
    </ConfigSection>
}

<ConfirmationModal @ref="confirmationModal" />

@code {
    // General
    private List<ConfigSection> configSections = new List<ConfigSection>();
    private ConfigSection? ConfigSectionRef { set => configSections.Add(value); }
    private Config configModel = new();
    private ConfirmationModal? confirmationModal;

    // Theme
    public const string DARK_THEME = "dark";
    public const string LIGHT_THEME = "light";

    // Relays
    private List<Relay> relays = new();
    private string newRelayUri = string.Empty;
    private ConcurrentDictionary<long, bool> relayStatus = new();
    private bool canBroadcast = true;

    // Proxy
    private bool isUriValid = true;

    private bool Theme
    {
        get => string.IsNullOrEmpty(configModel?.Theme) || configModel?.Theme == DARK_THEME;
        set
        { 
            configModel.Theme = (value ? DARK_THEME : LIGHT_THEME);
            Scripts?.InvokeVoid("setTheme", configModel.Theme);
        }
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        configModel = configService.MainConfig;
        ReloadRelays();
        relayService.ClientsStateChanged += ClientsStateChanged;
        relayService.ClientStatusChanged += ClientStatusChanged;
        eventDatabase.OptimizationComplete += OptimizationComplete;
    }

    private void ReloadRelays()
    {
        relays = relayService.GetRelays().OrderByDescending(r => r.Id).ToList();
    }

    private void ClientsStateChanged(object? sender, EventArgs args)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void ClientStatusChanged(object? sender, (long relayId, bool connected) data)
    {
        relayStatus[data.relayId] = data.connected;
        InvokeAsync(() => StateHasChanged());
    }

    private void Save()
    {
        configService.MainConfig = configModel;
    }

    private void SaveAndRestart()
    {
        if (!isUriValid) return;
        configService.MainConfig = configModel;
        relayService.RestartNostrClients();
    }

    private void SaveRelay(Relay relay)
    {
        relayService.SaveRelay(relay);
    }

    private void DeleteRelay(Relay relay)
    {
        relayService.DeleteRelay(relay.Id);
        ReloadRelays();
    }

    private void AddNewRelay()
    {
        if (relayService.AddNewRelayIfUnknown(newRelayUri))
        {
            newRelayUri = string.Empty;
            ReloadRelays();
        }
    }

    private void ResetRelays()
    {
        confirmationModal?.Show(ConfirmationModal.Options.Create(
            "Are you sure you want to restore the default list of relays and activate automatic mode?",
            "Reset relays",
            ConfirmationModal.Options.Button.CreateNoButton(),
            ConfirmationModal.Options.Button.CreateYesButton(() =>
            {
                relayService.ResetRelays();
                ReloadRelays();
                configModel.ManualRelayManagement = false;
                Save();
                relayService.RestartNostrClients();
            })));
    }

    private bool IsRelayConnected(long relayId)
    {
        return relayStatus.GetOrAdd(relayId, (_) => relayService.IsRelayConnected(relayId));
    }

    private void OptimizationComplete(object? sender, EventArgs data)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private void Clean()
    {
        confirmationModal?.Show(ConfirmationModal.Options.Create(
            "Are you sure you want to clean the database? Your accounts and settings will be preserved.",
            "Clean database",
            ConfirmationModal.Options.Button.CreateNoButton(),
            ConfirmationModal.Options.Button.CreateYesButton(() =>
            {
                eventDatabase.Clean();
                feedService.ClearDetailsNeeded();
            })));
    }

    private void Broadcast(long relayId)
    {
        if (accountService.MainAccount == null || !canBroadcast || !IsRelayConnected(relayId))
        {
            return;
        }
        canBroadcast = false;
        Task.Run(() => relayService.EventDispatcherAsync(relayId, accountService.MainAccount.Id))
            .ContinueWith((_) => { canBroadcast = true; InvokeAsync(() => StateHasChanged()); } );
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        relayService.ClientsStateChanged -= ClientsStateChanged;
        relayService.ClientStatusChanged -= ClientStatusChanged;
        eventDatabase.OptimizationComplete -= OptimizationComplete;
    }
    #endregion
}