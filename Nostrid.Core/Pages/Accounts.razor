@page "/accounts"
@using Nostrid.Data.Relays;
@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;
@using System.Security.Cryptography;
@using System.Diagnostics.CodeAnalysis;

@inject ConfigService configService
@inject AccountService accountService
@inject EventDatabase eventDatabase
@inject Lud06Service lud06Service
@inject LocalSignerFactory localSignerFactory

<div class="d-flex flex-shrink-0" style="width: 48px;">
    <div class="lh-1">
        <div class="border rounded-2 overflow-hidden d-inline-block">
            @((MarkupString)Utils.ToSvgIdenticon(PublicKey, 48))
        </div>
    </div>
</div>
<div class="d-flex flex-column flex-grow-1 ms-3">
    <div class="d-flex flex-row align-items-center">
            
    </div>
</div>

@code {

    public TextInput privateKeyModel = new();
    private string PublicKey
    {
        get
        {
            return LocalSigner.TryGetPubKeyFromPrivKey(privateKeyModel.Text, out var _, out var pubKey) ? pubKey : string.Empty;
        }
    }
    private void GeneratePrivateKey()
    {
        privateKeyModel.Text = ByteTools.PubkeyToNsec(Convert.ToHexString(RandomNumberGenerator.GetBytes(32)).ToLower());
    }

    private async Task CreateNewAccount()
    {
        string privkey = null;

        if (Utils.IsValidNostrId(privateKeyModel.Text))
        {
            privkey = privateKeyModel.Text;
        }
        else if (ByteTools.TryDecodeBech32(privateKeyModel.Text, out var prefix, out var hex) && prefix == "nsec" && !string.IsNullOrEmpty(hex))
        {
            privkey = hex;
        }

        if (privkey.IsNotNullOrEmpty() && localSignerFactory.TryFromPrivKey(privkey, out var signer))
        {
            var account = new Model.Account()
                {
                    PrivKey = privkey,
                    Id = await signer.GetPubKey(),
                };
            eventDatabase.SaveAccount(account);
        }
        else
        {
            //TODO: mark private key as invalid    
        }
    }
}