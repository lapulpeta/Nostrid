@implements IDisposable
@implements ITreeItem

@using Nostrid.Data;
@using Nostrid.Interfaces;
@using Nostrid.Misc;
@using Nostrid.Model;

@inject NavigationManager navigationManager
@inject AccountService accountService
@inject FeedService feedService
@inject IJSRuntime jsRuntime
@inject ConfigService configService
@inject IClipboardService clipboardService
@inject NoteProcessor noteProcessor

@code{
    [Parameter, EditorRequired]
    public NoteTree Tree { get; set; } = null!;

    [Parameter]
    public Action<ITreeItem>? OnComponentLoad { get; set; }

    [Parameter]
    public Action<ITreeItem>? OnComponentUnload { get; set; }

    [Parameter]
    public Action<Event>? OnReply { get; set; }

    [Parameter]
    public Action<string>? OnPay { get; set; }

    [Parameter]
    public Action<Event>? OnDelete { get; set; }

    [CascadingParameter]
    public Scripts? Scripts { get; set; }
}

<UpdatabableElement @ref="mainSection">
    <div @ref="referenceElement" class="d-flex flex-row mb-3 @(accountService.MainAccount?.Id == Tree.Note?.PublicKey ? "flex-row-reverse align-self-end" : string.Empty)">
        @if (Tree.Note.Deleted)
        {
            <div class="d-flex flex-grow-1 align-items-center justify-content-center text-secondary">Note deleted</div>
        }
        else
        {
            <div class="flex-shrink-0">
                <a href="/account/@Tree.Note?.PublicKey" @onclick:stopPropagation="true">
                    <AccountPicture Id="@Tree.Note?.PublicKey"></AccountPicture>
                </a>
            </div>
            <div class="d-flex flex-column align-items-start">
                <div class="p-2 pt-1 mx-2 rounded shadow-sm position-relative triangle @(accountService.MainAccount?.Id == Tree.Note?.PublicKey ? "triangle-end bg-success-subtle" : "bg-body-secondary triangle-start")">
                    <MessageViewer Event="@Tree.Note">
                        <TopContent>
                            <span class="ms-2 d-inline-block text-secondary"><TimeStamp DateSeconds="@(Tree.Note?.CreatedAtCurated ?? 0)" /></span>
                            <div class="btn-group">
                                <a role="button" @onclick:stopPropagation="true" class="d-inline-block lh-1 p-1 ms-1 rounded-5 fs-6 text-secondary bg-primary-opacity-10-hover" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </a>
                                <ul class="dropdown-menu shadow">
                                    @if (accountService.MainAccount != null)
                                    {
                                        <li>
                                            <a role="button" class="dropdown-item" @onclick="@Reply" @onclick:stopPropagation="true">
                                                <i class="bi bi-chat"></i>
                                                Reply
                                            </a>
                                        </li>
                                        @if (Tree.Note != null 
                                            && Tree.Note.PublicKey == accountService.MainAccount?.Id)
                                        {
                                            <li>
                                                <a role="button" class="dropdown-item" @onclick="@Delete" @onclick:stopPropagation="true">
                                                    <i class="bi bi-trash3"></i>
                                                    Delete
                                                </a>
                                            </li>
                                        }
                                    }
                                    <PayButton Id="@Tree.Note?.PublicKey">
                                        <li>
                                            <a role="button" class="dropdown-item" @onclick="@Pay" @onclick:stopPropagation="true">
                                                <i class="bi bi-lightning-charge"></i>
                                                Pay
                                            </a>
                                        </li>
                                    </PayButton>
                                    <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(ByteTools.PubkeyToNote(Tree.Note?.Id ?? string.Empty)))" @onclick:stopPropagation="true">Copy Message ID</a></li>
                                    <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(Tree.Note?.Id ?? string.Empty))" @onclick:stopPropagation="true">Copy Message Hex</a></li>
                                    <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(ByteTools.PubkeyToNpub(Tree.Note?.PublicKey ?? string.Empty)))" @onclick:stopPropagation="true">Copy Account Npub</a></li>
                                    <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(Tree.Note?.PublicKey ?? string.Empty))" @onclick:stopPropagation="true">Copy Account Hex</a></li>
                                    <li><a role="button" class="dropdown-item" @onclick="@(() => CopyContentAsync())" @onclick:stopPropagation="true">Copy Content</a></li>
                                    <li><a role="button" class="dropdown-item" @onclick="@(() => feedService.ResendExistingEvent(Tree.Note))" @onclick:stopPropagation="true">Broadcast</a></li>
                                </ul>
                            </div>
                        </TopContent>
                    </MessageViewer>
                </div>
                <UpdatabableElement @ref="reactionsSection">
                    @{
                        const int MAX_GROUPS = 1;
                        var groupedReactions = eventDetailsCount?.ReactionGroups.Select(g => new { Reaction = g.Key, Count = g.Value }).OrderByDescending(r => r.Count);
                        if (groupedReactions?.Any() ?? false)
                        {
                            <div class="ms-2 d-flex flex-row fs-6" style="transform: translate(0, -25%);">
                                @{
                                    foreach (var group in groupedReactions.Take(MAX_GROUPS))
                                    {
                                        <div role="button" class="ms-1 badge rounded-pill bg-body text-secondary border shadow-sm">
                                            @NormalizedReaction(group.Reaction)
                                            <span class="fs-7">@group.Count</span>
                                        </div>
                                    }
                                    var remainingReactionCount = groupedReactions.Skip(MAX_GROUPS).Sum(group => group.Count);
                                    if (remainingReactionCount > 0)
                                    {
                                        <div role="button" class="ms-1 badge rounded-pill bg-body text-secondary border shadow-sm">
                                            <i class="bi bi-three-dots"></i>
                                            <span class="fs-7">@remainingReactionCount</span>
                                        </div>
                                    }
                                }
                            </div>
                        }
                    }
                </UpdatabableElement>
            </div>
        }
    </div>
</UpdatabableElement>

@code {
    private ElementReference? referenceElement;
    private EventDetailsCount? eventDetailsCount;
    private UpdatabableElement? reactionsSection;
    private UpdatabableElement? mainSection;

    // We never rerender this component with different parameters
    // so all the logic can be done here
    protected override void OnInitialized()
    {
        eventDetailsCount = feedService.GetEventDetailsCount(Tree.Note?.Id ?? string.Empty);

        feedService.NoteCountChanged += NoteCountChanged;
        feedService.NoteDeleted += NoteDeleted;
        accountService.MainAccountChanged += MainAccountChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && OnComponentLoad != null)
        {
            OnComponentLoad(this);
        }
    }

    private void Reply()
    {
        OnReply?.Invoke(Tree.Note);
    }

    private void Pay()
    {
        OnPay?.Invoke(Tree.Note.PublicKey);
    }

    private void Delete()
    {
        OnDelete?.Invoke(Tree.Note);
    }

    private string NormalizedReaction(string reaction)
    {
        if (string.IsNullOrEmpty(reaction) || reaction == "+")
        {
            return "❤️";
        }
        else
        {
            return reaction;
        }
    }

    public async Task<bool> IsVisibleAsync()
    {
        if (Scripts == null || referenceElement == null) return false;
        return await Scripts.InvokeAsync<bool>("isElementVisible", referenceElement);
    }

    public IEnumerable<ITreeItem> GetTreeItems()
    {
        return (new ITreeItem[] { this });
    }

    private void NoteCountChanged(object? sender, (string eventId, EventDetailsCount delta) data)
    {
        if (Tree.Note.Id != data.eventId)
            return;

        eventDetailsCount.Add(data.delta);
        reactionsSection?.Update();
    }

    private void NoteDeleted(object? sender, string eventId)
    {
        if (Tree.Note.Id != eventId)
            return;

        Tree.Note.Deleted = true;
        mainSection?.Update();
    }

    private void MainAccountChanged(object? sender, EventArgs args)
    {
        mainSection?.Update();
    }

    private async Task CopyContentAsync()
    {
        string content = Tree.Note.Content;
        if (Tree.Note.Kind == NostrKind.DM)
        {
            var pubkey = Tree.Note.PublicKey == accountService.MainAccount.Id 
                ? Tree.Note.GetMentionsIds('p').FirstOrDefault() 
                : Tree.Note.PublicKey;
            content = await accountService.MainAccountSigner.DecryptNip04(pubkey, content);
        }
        await clipboardService.CopyAsync(content);
    }

    protected override bool ShouldRender()
    {
        return false; // Never auto refresh
    }

    #region Dispose
    private bool disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            disposed = true;
        }
    }

    private void Cleanup()
    {
        if (OnComponentUnload != null)
        {
            OnComponentUnload(this);
        }
        feedService.NoteCountChanged -= NoteCountChanged;
        feedService.NoteDeleted -= NoteDeleted;
        accountService.MainAccountChanged -= MainAccountChanged;
    }
    #endregion
}
