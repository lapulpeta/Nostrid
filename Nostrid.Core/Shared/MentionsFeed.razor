@implements IDisposable

@using Nostrid.Data
@using Nostrid.Data.Relays;
@using Nostrid.Model;
@using System.Collections.Concurrent;

@inject AccountService accountService
@inject FeedService feedService
@inject NavigationManager navigationManager

<FeedViewer BaseFilter="@filter" MessageKinds="@(new[]{NostrKind.Text, NostrKind.Repost})" OnLoaded="@OnLoaded" />

@code {
    private SubscriptionFilter? filter;

    protected override void OnInitialized()
    {
        accountService.MainAccountChanged += MainAccountChanged;
        SetFilter();
    }

    private void OnLoaded(IEnumerable<NoteTree> notesFeed)
    {
        if (notesFeed.Any())
        {
            var newestNoteDate = DateTimeOffset.FromUnixTimeSeconds(notesFeed.Max(n => n.Note.CreatedAtCurated)).UtcDateTime;
            accountService.SetLastRead(newestNoteDate);
        }
    }

    private void MainAccountChanged(object? sender, EventArgs args)
    {
        if (accountService.MainAccount == null)
        {
            navigationManager.NavigateTo("/feed");
            return;
        }
        SetFilter();
        InvokeAsync(() => StateHasChanged());
    }

    private void SetFilter()
    {
        filter = new MentionSubscriptionFilter(accountService.MainAccount?.Id);
    }

    #region Dispose
    private bool disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!disposed)
        {
            if (disposing)
            {
                accountService.MainAccountChanged -= MainAccountChanged;
            }

            disposed = true;
        }
    }
    #endregion
}
