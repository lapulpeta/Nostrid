@implements IDisposable
@implements ITreeItem

@using Markdig;
@using Nostrid.Data.Relays;
@using Nostrid.Data;
@using Nostrid.Interfaces;
@using Nostrid.Misc;
@using Nostrid.Model;
@using Ganss.Xss;
@using System.Web;
@using System.Net;

@inject NavigationManager navigationManager
@inject AccountService accountService
@inject FeedService feedService
@inject IJSRuntime jsRuntime
@inject ConfigService configService
@inject IClipboardService clipboardService

@code{
    [Parameter, EditorRequired]
    public NoteTree Tree { get; set; } = null!;

    [Parameter, EditorRequired]
    public string MainEventId { get; set; } = null!;

    [Parameter, EditorRequired]
    public int[] TreeLayout { get; set; } = null!;

    [Parameter]
    public bool OnlyChild { get; set; }

    [Parameter]
    public Action<ITreeItem>? OnComponentLoad { get; set; }

    [Parameter]
    public Action<ITreeItem>? OnComponentUnload { get; set; }

    [Parameter]
    public Action<Event>? OnReply { get; set; }

    [Parameter]
    public Action<Event>? OnRepost { get; set; }

    [Parameter]
    public Action<string>? OnPay { get; set; }

    [Parameter]
    public Action<Event>? OnDelete { get; set; }

    [Parameter]
    public int ChildIndex { get; set; }

    [Parameter]
    public bool NotClickable { get; set; }

    [CascadingParameter]
    public Scripts? Scripts { get; set; }
}

<div role="button" @ref="referenceElement" class="note d-flex flex-row px-2 px-lg-3 py-2 bg-tertiary-hover border-bottom @(Tree.Note.Id == MainEventId ? "bg-body-secondary" : "")"
     @onclick="@HandleClick" style="margin: 0 -1rem;">

    @for (var i = 1; i < TreeLayout.Length; i++)
    {
        var last = i == TreeLayout.Length - 1;
        <div class="flex-shrink-0 d-flex flex-row">
            <div class="tree-placeholder-width-half"></div>
            @if (TreeLayout[i] > 1)
            {
                <div class="bg-secondary opacity-75 tree-line-width" style="margin-bottom: -1.07rem;"></div>
            }
            else if (!OnlyChild && TreeLayout[i] == 1 && last)
            {
                <div class="bg-secondary opacity-75 tree-line-width tree-placeholder-height-half"></div>
            }
            else
            {
                <div class="tree-line-width"></div>
            }
            <div class="d-flex flex-column justify-content-center tree-placeholder-height tree-placeholder-width-last">
                @if (!OnlyChild && last)
                {
                    <div class="bg-secondary opacity-75 tree-line-height"></div>
                }
            </div>
        </div>
    }
    @if (Tree.Note.Deleted)
    {
        <div class="d-flex flex-grow-1 align-items-center justify-content-center text-secondary">Note deleted</div>
    }
    else
    {
        <div class="d-flex flex-grow-1 flex-column">
            <EventViewer Event="@Tree.Note" ShowReplyingTo="@(TreeLayout.Length == 1 && !OnlyChild)">
                <LeftPlaceholder>
                    @if (Tree.Children.Count > 0)
                    {
                        <div class="flex-grow-1 d-flex flex-row">
                            <div class="tree-placeholder-width-half"></div>
                            <div class="bg-secondary opacity-75 tree-line-width" style="margin-bottom: -1.07rem;"></div>
                        </div>
                    }
                </LeftPlaceholder>
                <BottomPlaceholder>
                    <div class="w-100 mt-1 d-flex flex-row" style="margin-right:-1.5rem;">
                        @if (accountService.MainAccount != null)
                        {
                            <a role="button" @onclick="Reply" @onclick:stopPropagation="true" class="d-flex text-decoration-none lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                <i class="bi bi-chat"></i>
                            </a>
                            <a role="button" @onclick="@Repost" @onclick:stopPropagation="true" class="d-flex text-decoration-none lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                <i class="bi bi-repeat"></i>
                                @if (eventDetailsCount?.Reposts > 0)
                                {
                                    <span class="fs-7 lh-sm">&nbsp;@eventDetailsCount.Reposts</span>
                                }
                            </a>
                            <a role="button" @onclick:stopPropagation="true"
                                class="d-flex text-decoration-none lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover"
                                data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi @(!likeSent ? "bi-heart" : "bi-heart-fill")"></i>
                                @{
                                    var groupedReactions = eventDetailsCount?.ReactionGroups.Select(g => new {Reaction = g.Key, Count = g.Value}).OrderByDescending(r => r.Count);
                                    var groupedReactionsSum = groupedReactions?.Sum(reaction => reaction.Count);
                                    if (groupedReactionsSum > 0)
                                    {
                                        <span class="fs-7 lh-sm">&nbsp;@groupedReactionsSum</span>
                                    }
                                }
                            </a>
                            <div class="dropdown-menu p-1 shadow" style="min-width: initial;">
                                @if (groupedReactionsSum > 0)
                                {
                                    <div class="d-flex flex-row" style="margin-right: -.25rem;">
                                        @foreach (var reactionGroup in groupedReactions!.Take(5))
                                        {
                                            <a @onclick="@(() => Like(reactionGroup.Reaction))" @onclick:stopPropagation="true"
                                               class="p-1 me-1 d-flex flex-row align-items-center fs-4 text-decoration-none bg-primary-opacity-10-hover">
                                                <span class="text-center" style="min-width: 20px;">@NormalizedReaction(reactionGroup.Reaction)</span>
                                                <span class="mt-1 me-1 fs-7 fw-normal text-secondary">@reactionGroup.Count</span>
                                            </a>
                                        }
                                    </div>
                                }
                                @if (groupedReactionsSum > 0 && !likeSent)
                                {
                                    <hr class="my-1" />
                                }
                                @if (!likeSent)
                                {
                                    <div class="fs-3 d-flex flex-row" style="margin: 0 -.5rem -.5rem 0;">
                                        @{
                                            var reactions = new string[] { "+", "-", "🤙", "❤️", "😂", "😭", "😡", "😮" };
                                            foreach (var reaction in reactions)
                                            {
                                                <a @onclick="@(() => Like(reaction))" @onclick:stopPropagation="true"
                                               class="text-decoration-none me-2 mb-2 bg-primary-opacity-10-hover">
                                                    @NormalizedReaction(reaction)
                                                </a>
                                            }
                                        }
                                    </div>
                                }
                            </div>
                            @if (Tree.Note.PublicKey == accountService.MainAccount.Id)
                            {
                                <a role="button" @onclick="@Delete" @onclick:stopPropagation="true"
                                   class="d-flex text-decoration-none lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                    <i class="bi bi-trash3"></i>
                                </a>
                            }
                        }
                        <PayButton Id="@Tree.Note.PublicKey">
                            <a role="button" @onclick="@Pay" @onclick:stopPropagation="true"
                               class="d-flex text-decoration-none lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                <i class="bi bi-lightning-charge"></i>
                                @if (eventDetailsCount?.Zaps > 0)
                                {
                                    <span class="fs-7 lh-sm">&nbsp;@eventDetailsCount.Zaps</span>
                                }
                            </a>
                        </PayButton>
                        <a role="button" @onclick:stopPropagation="true"
                           class="d-flex text-decoration-none lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover" data-bs-toggle="dropdown" aria-expanded="false">
                            <i class="bi bi-three-dots-vertical"></i>
                        </a>
                        <ul class="dropdown-menu shadow">
                            <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(ByteTools.PubkeyToNote(Tree.Note.Id ?? string.Empty)))" @onclick:stopPropagation="true">Copy Note ID</a></li>
                            <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(Tree.Note.Id ?? string.Empty))" @onclick:stopPropagation="true">Copy Note Hex</a></li>
                            <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(ByteTools.PubkeyToNpub(Tree.Note.PublicKey ?? string.Empty)))" @onclick:stopPropagation="true">Copy Account Npub</a></li>
                            <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(Tree.Note.PublicKey ?? string.Empty))" @onclick:stopPropagation="true">Copy Account Hex</a></li>
                            <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(Tree.Note.Content ?? string.Empty))" @onclick:stopPropagation="true">Copy Content</a></li>
                            <li><a role="button" class="dropdown-item" @onclick="@(() => feedService.ResendExistingEvent(Tree.Note))" @onclick:stopPropagation="true">Broadcast</a></li>
                        </ul>
                    </div>
                </BottomPlaceholder>
            </EventViewer>
        </div>
    }
</div>

@if (Tree.Children.Count > 0)
{
    List<NoteTreeNode> visiblePortion = new();

    if (TreeLayout.Length > MaxNestingLevel)
    {
        visiblePortion.Add(new NoteTreeShowMore(0, false, Tree.Note.Id));
    }
    else
    {
        if (ChildIndex > 0)
        {
            visiblePortion.Add(new NoteTreeShowMore(Math.Max(ChildIndex - MaxChildren, 0), true, Tree.Note.Id));
        }
        var skippedPortion = Tree.Children.Skip(ChildIndex);
        visiblePortion.AddRange(skippedPortion.Take(MaxChildren));
        if (skippedPortion.Skip(MaxChildren).Any())
        {
            visiblePortion.Add(new NoteTreeShowMore(ChildIndex + MaxChildren, false, Tree.Note.Id));
        }
    }

    <NoteTreeViewer @ref="NoteTreeViewerRef"
                    Trees="@visiblePortion" Root="false" MainEventId="@MainEventId"
                    TreeLayout="@TreeLayout" OnlyChild="@(visiblePortion.Count == 1)"
                    OnReply="@OnReply" OnRepost="@OnRepost" OnPay="@OnPay" OnDelete="@OnDelete"
                    NotClickable="@NotClickable" />

}

@code {
    private bool likeClicked = false;
    private bool likeSent => likeClicked || (accountService.MainAccount != null ? feedService.AccountReacted(Tree.Note.Id, accountService.MainAccount.Id) : false);
    private bool showDifficulty => configService.MainConfig.ShowDifficulty;
    private ElementReference? referenceElement;
    private NoteTreeViewer? NoteTreeViewerRef;
    private EventDetailsCount? eventDetailsCount;

    public const int MaxNestingLevel = 4;
    public const int MaxChildren = 5;

    protected override void OnInitialized()
    {
        feedService.NoteCountChanged += NoteCountChanged;
        feedService.NoteDeleted += NoteDeleted;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        eventDetailsCount = feedService.GetEventDetailsCount(Tree.Note.Id);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && OnComponentLoad != null)
        {
            OnComponentLoad(this);
        }
    }

    private void Reply()
    {
        OnReply?.Invoke(Tree.Note);
    }

    private void Repost()
    {
        OnRepost?.Invoke(Tree.Note);
    }

    private async Task Like(string reaction)
    {
        if (likeSent) return;
        await feedService.SendReaction(reaction, Tree.Note);
        likeClicked = true;
    }

    private void Pay()
    {
        OnPay?.Invoke(Tree.Note.PublicKey);
    }

    private void Delete()
    {
        OnDelete?.Invoke(Tree.Note);
    }

    private string NormalizedReaction(string reaction)
    {
        if (string.IsNullOrEmpty(reaction) || reaction == "+")
        {
            return "👍";
        }
        if (reaction == "-")
        {
            return "👎";
        }
        return reaction;
    }

    public async Task<bool> IsVisibleAsync()
    {
        if (Scripts == null || referenceElement == null) return false;
        return await Scripts.InvokeAsync<bool>("isElementVisible", referenceElement);
    }

    public IEnumerable<ITreeItem> GetTreeItems()
    {
        return (new ITreeItem[] { this }).Concat(NoteTreeViewerRef?.GetTreeItems() ?? Enumerable.Empty<ITreeItem>());
    }

    private void NoteCountChanged(object? sender, (string eventId, EventDetailsCount delta) data)
    {
        if (Tree.Note.Id != data.eventId)
            return;

        eventDetailsCount.Add(data.delta);
        InvokeAsync(() => StateHasChanged());
    }

    private void NoteDeleted(object? sender, string eventId)
    {
        if (Tree.Note.Id != eventId)
            return;

        Tree.Note.Deleted = true;
        InvokeAsync(() => StateHasChanged());
    }

    private void HandleClick()
    {
        if (!NotClickable)
        {
            navigationManager.NavigateTo($"/note/{Tree.Note.Id}");
        }
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        if (OnComponentUnload != null)
        {
            OnComponentUnload(this);
        }
        feedService.NoteCountChanged -= NoteCountChanged;
        feedService.NoteDeleted -= NoteDeleted;
    }
    #endregion
}
