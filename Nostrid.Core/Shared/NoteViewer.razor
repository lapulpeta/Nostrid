@implements IDisposable
@implements ITreeItem

@using Markdig;
@using Nostrid.Data.Relays;
@using Nostrid.Data;
@using Nostrid.Interfaces;
@using Nostrid.Misc;
@using Nostrid.Model;
@using Ganss.Xss;
@using System.Web;
@using System.Net;

@inject NavigationManager navigationManager
@inject AccountService accountService
@inject FeedService feedService
@inject IJSRuntime jsRuntime
@inject ConfigService configService
@inject IClipboardService clipboardService

@code{
    [Parameter, EditorRequired]
    public NoteTree Tree { get; set; } = null!;

    [Parameter, EditorRequired]
    public string MainEventId { get; set; } = null!;

    [Parameter, EditorRequired]
    public int[] TreeLayout { get; set; } = null!;

    [Parameter]
    public bool OnlyChild { get; set; }

    [Parameter]
    public Action<ITreeItem>? OnComponentLoad { get; set; }

    [Parameter]
    public Action<ITreeItem>? OnComponentUnload { get; set; }

    [Parameter]
    public Action<Event>? OnReply { get; set; }

    [Parameter]
    public Action<Event>? OnRepost { get; set; }

    [Parameter]
    public Action<string>? OnPay { get; set; }

    [Parameter]
    public Action<Event>? OnDelete { get; set; }

    [Parameter]
    public int ChildIndex { get; set; }

    [Parameter]
    public bool NotClickable { get; set; }

    [CascadingParameter]
    public Scripts? Scripts { get; set; }
}

<div role="button" @ref="referenceElement" class="note d-flex flex-row px-2 px-lg-3 py-2 bg-tertiary-hover border-bottom @(Tree.Note.Id == MainEventId ? "bg-body-secondary" : "")"
     @onclick="@HandleClick" style="margin: 0 -1rem;">

    <UpdatabableElement @ref="treeLayoutSection">
        @for (var i = 1; i < TreeLayout.Length; i++)
        {
            var last = i == TreeLayout.Length - 1;
            <div class="flex-shrink-0 d-flex flex-row">
                <div class="tree-placeholder-width-half"></div>
                @if (TreeLayout[i] > 1)
                {
                    <div class="bg-secondary opacity-75 tree-line-width" style="margin-bottom: -1.07rem;"></div>
                }
                else if (!OnlyChild && TreeLayout[i] == 1 && last)
                {
                    <div class="bg-secondary opacity-75 tree-line-width tree-placeholder-height-half"></div>
                }
                else
                {
                    <div class="tree-line-width"></div>
                }
                <div class="d-flex flex-column justify-content-center tree-placeholder-height tree-placeholder-width-last">
                    @if (!OnlyChild && last)
                    {
                        <div class="bg-secondary opacity-75 tree-line-height"></div>
                    }
                </div>
            </div>
        }
    </UpdatabableElement>
    <UpdatabableElement @ref="mainSection">
        @if (Tree.Note.Deleted)
        {
            <div class="d-flex flex-row align-items-center flex-grow-1">
                <div>
                    <div class="d-flex flex-row align-items-center justify-content-center rounded-5 border" style="width: 48px; height: 48px;">
                        <i class="bi bi-x-lg"></i>
                    </div>
                    @if (Tree.Children.Count > 0)
                    {
                        <div class="flex-grow-1 d-flex flex-row">
                            <div class="tree-placeholder-width-half"></div>
                            <div class="bg-secondary opacity-75 tree-line-width" style="margin-bottom: -1.07rem;"></div>
                        </div>
                    }
                </div>
                <div class="ms-2 position-relative">
                    <div class="opacity-25 position-relative" style="filter: blur(1px);">
                        <span class="placeholder placeholder-xs d-block" style="width: 100px; cursor: inherit;"></span>
                        <span class="placeholder placeholder-xs mt-1 d-block" style="width: 200px; cursor: inherit;"></span>
                        <span class="placeholder placeholder-xs mt-1 d-block" style="width: 200px; cursor: inherit;"></span>
                    </div>
                    <span class="position-absolute top-50 start-50 translate-middle badge text-bg-secondary rounded-pill">Deleted</span>
                </div>
            </div>
        }
        else if (accountService.IsMuting(Tree.Note.PublicKey))
        {
            <div class="d-flex flex-row align-items-center flex-grow-1">
                <div>
                    <div class="d-flex flex-row align-items-center justify-content-center rounded-5 border" style="width: 48px; height: 48px;">
                        <i class="bi bi-volume-mute fs-4"></i>
                    </div>
                    @if (Tree.Children.Count > 0)
                    {
                        <div class="flex-grow-1 d-flex flex-row">
                            <div class="tree-placeholder-width-half"></div>
                            <div class="bg-secondary opacity-75 tree-line-width" style="margin-bottom: -1.07rem;"></div>
                        </div>
                    }
                </div>
                <div class="ms-2 position-relative">
                    <div class="opacity-25 position-relative" style="filter: blur(1px);">
                        <span class="placeholder placeholder-xs d-block" style="width: 100px; cursor: inherit;"></span>
                        <span class="placeholder placeholder-xs mt-1 d-block" style="width: 200px; cursor: inherit;"></span>
                        <span class="placeholder placeholder-xs mt-1 d-block" style="width: 200px; cursor: inherit;"></span>
                    </div>
                    <span class="position-absolute top-50 start-50 translate-middle badge text-bg-secondary rounded-pill">Muted</span>
                </div>
            </div>
        }
        else
        {
            <div class="d-flex flex-grow-1 flex-column">
                <EventViewer Event="@Tree.Note" ShowReplyingTo="@(TreeLayout.Length == 1 && !OnlyChild)" Expanded="@(Tree.Note.Id == MainEventId)">
                    <LeftPlaceholder>
                        <UpdatabableElement @ref="leftPlaceholder">
                            @if (Tree.Children.Count > 0)
                            {
                                <div class="flex-grow-1 d-flex flex-row">
                                    <div class="tree-placeholder-width-half"></div>
                                    <div class="bg-secondary opacity-75 tree-line-width" style="margin-bottom: -1.07rem;"></div>
                                </div>
                            }
                        </UpdatabableElement>
                    </LeftPlaceholder>
                    <BottomPlaceholder>
                        <UpdatabableElement @ref="bottomPlaceholder">
                            <div class="w-100 mt-1 d-flex flex-row" style="margin-right:-1.5rem;">
                                @if (accountService.MainAccount != null)
                                {
                                    <a role="button" @onclick="Reply" @onclick:stopPropagation="true" class="d-flex lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                        <i class="bi bi-chat"></i>
                                    </a>
                                    <a role="button" @onclick="@Repost" @onclick:stopPropagation="true" class="d-flex lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                        <i class="bi bi-repeat"></i>
                                        @if (eventDetailsCount?.Reposts > 0)
                                        {
                                            <span class="fs-7 lh-sm">&nbsp;@eventDetailsCount.Reposts</span>
                                        }
                                    </a>
                                    <a role="button" @onclick:stopPropagation="true"
                                        class="d-flex lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover"
                                        data-bs-toggle="dropdown" aria-expanded="false">
                                        <i class="bi @(!likeClicked ? "bi-heart" : "bi-heart-fill")"></i>
                                        @{
                                            var reactionsCount = eventDetailsCount?.ReactionGroups.Sum(r => r.Value);
                                            if (reactionsCount > 0)
                                            {
                                                <span class="fs-7 lh-sm">&nbsp;@reactionsCount</span>
                                            }
                                        }
                                    </a>
                                    <div class="dropdown-menu p-1 shadow" style="min-width: initial;">
                                        <ReactionsPopup EventId="@(Tree.Note.ReplaceableId ?? Tree.Note.Id)" />
                                    </div>
                                    @if (Tree.Note.PublicKey == accountService.MainAccount.Id)
                                    {
                                        <a role="button" @onclick="@Delete" @onclick:stopPropagation="true"
                                           class="d-flex lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                            <i class="bi bi-trash3"></i>
                                        </a>
                                    }
                                }
                                <PayButton Id="@Tree.Note.PublicKey">
                                    <a role="button" @onclick="@Pay" @onclick:stopPropagation="true"
                                       class="d-flex lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover">
                                        <i class="bi bi-lightning-charge"></i>
                                        @if (eventDetailsCount?.Zaps > 0)
                                        {
                                            <span class="fs-7 lh-sm">&nbsp;@eventDetailsCount.Zaps</span>
                                        }
                                    </a>
                                </PayButton>
                                <a role="button" @onclick:stopPropagation="true"
                                   class="d-flex lh-1 p-2 rounded-5 fs-6 text-secondary me-4 bg-primary-opacity-10-hover" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </a>
                                <ul class="dropdown-menu shadow">
                                    @if (Tree.Note.ReplaceableId.IsNotNullOrEmpty())
                                    {
                                        <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(ByteTools.EncodeTvlBech32(new Naddr(Tree.Note.ReplaceableId)) ?? string.Empty))" @onclick:stopPropagation="true">Copy Naddr</a></li>
                                    }
                                    <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(ByteTools.PubkeyToNote(Tree.Note.Id ?? string.Empty)))" @onclick:stopPropagation="true">Copy Note ID</a></li>
                                    <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(Tree.Note.Id ?? string.Empty))" @onclick:stopPropagation="true">Copy Note Hex</a></li>
                                    <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(ByteTools.PubkeyToNpub(Tree.Note.PublicKey ?? string.Empty)))" @onclick:stopPropagation="true">Copy Account Npub</a></li>
                                    <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(Tree.Note.PublicKey ?? string.Empty))" @onclick:stopPropagation="true">Copy Account Hex</a></li>
                                    <li><a role="button" class="dropdown-item" @onclick="@(() => clipboardService.CopyAsync(Tree.Note.Content ?? string.Empty))" @onclick:stopPropagation="true">Copy Content</a></li>
                                    <li><a role="button" class="dropdown-item" @onclick="@(() => feedService.ResendExistingEvent(Tree.Note))" @onclick:stopPropagation="true">Broadcast</a></li>
                                </ul>
                            </div>
                        </UpdatabableElement>
                    </BottomPlaceholder>
                </EventViewer>
            </div>
        }
    </UpdatabableElement>
</div>

<UpdatabableElement @ref="treeChildrenSection">
    @if (Tree.Children.Count > 0)
    {
        List<NoteTreeNode> visiblePortion = new();

        if (TreeLayout.Length > MaxNestingLevel)
        {
            visiblePortion.Add(new NoteTreeShowMore(0, false, Tree.Note.Id));
        }
        else
        {
            if (ChildIndex > 0)
            {
                visiblePortion.Add(new NoteTreeShowMore(Math.Max(ChildIndex - MaxChildren, 0), true, Tree.Note.Id));
            }
            var skippedPortion = Tree.Children.Skip(ChildIndex);
            visiblePortion.AddRange(skippedPortion.Take(MaxChildren));
            if (skippedPortion.Skip(MaxChildren).Any())
            {
                visiblePortion.Add(new NoteTreeShowMore(ChildIndex + MaxChildren, false, Tree.Note.Id));
            }
        }

        <NoteTreeViewer @ref="NoteTreeViewerRef"
                        Trees="@visiblePortion" Root="false" MainEventId="@MainEventId"
                        TreeLayout="@TreeLayout" OnlyChild="@(visiblePortion.Count == 1)"
                        OnReply="@OnReply" OnRepost="@OnRepost" OnPay="@OnPay" OnDelete="@OnDelete"
                        NotClickable="@NotClickable" />

    }
</UpdatabableElement>

@code {
    private bool likeClicked = false;
    private bool showDifficulty => configService.MainConfig.ShowDifficulty;
    private ElementReference? referenceElement;
    private NoteTreeViewer? NoteTreeViewerRef;
    private EventDetailsCount? eventDetailsCount;
    private UpdatabableElement? bottomPlaceholder, leftPlaceholder, treeLayoutSection, treeChildrenSection, mainSection;
    private int[]? previousLayout;
    private bool previousHasChildren;
    private bool previousOnlyChild;
    private bool rendered;

    public const int MaxNestingLevel = 4;
    public const int MaxChildren = 5;

    protected override void OnParametersSet()
    {
        if (rendered)
        {
            // Always rerender children, just in case their tree layout has changed
            treeChildrenSection?.Update();

            // Check if current tree layout must be rerendered
            if ((previousLayout != null && !Enumerable.SequenceEqual(previousLayout.Skip(1), TreeLayout.Skip(1))) ||
                previousOnlyChild != OnlyChild)
            {
                treeLayoutSection?.Update();
            }

            // Check if lines attached to profile pic must be rerendered
            if (previousHasChildren != Tree.Children.Any())
            {
                leftPlaceholder?.Update();
            }
        }

        previousLayout = TreeLayout;
        previousOnlyChild = OnlyChild;
        previousHasChildren = Tree.Children.Any();

        if (rendered)
        {
            return;
        }
        rendered = true;

        eventDetailsCount = feedService.GetEventDetailsCount(Tree.Note.ReplaceableId ?? Tree.Note.Id);
        likeClicked = accountService.MainAccount != null && feedService.AccountReacted(Tree.Note.ReplaceableId ?? Tree.Note.Id, accountService.MainAccount.Id);

        feedService.NoteCountChanged += NoteCountChanged;
        feedService.NoteDeleted += NoteDeleted;
        feedService.NoteReacted += NoteReacted;
        accountService.AccountMutesChanged += AccountMutesChanged;
        accountService.MainAccountChanged += MainAccountChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender && OnComponentLoad != null)
        {
            OnComponentLoad(this);
        }
    }

    private void Reply()
    {
        OnReply?.Invoke(Tree.Note);
    }

    private void Repost()
    {
        OnRepost?.Invoke(Tree.Note);
    }

    private void Pay()
    {
        OnPay?.Invoke(Tree.Note.PublicKey);
    }

    private void Delete()
    {
        OnDelete?.Invoke(Tree.Note);
    }

    public async Task<bool> IsVisibleAsync()
    {
        if (Scripts == null || referenceElement == null) return false;
        return await Scripts.InvokeAsync<bool>("isElementVisible", referenceElement);
    }

    public IEnumerable<ITreeItem> GetTreeItems()
    {
        return (new ITreeItem[] { this }).Concat(NoteTreeViewerRef?.GetTreeItems() ?? Enumerable.Empty<ITreeItem>());
    }

    private void AccountMutesChanged(object? sender, (string accountId, List<string> mutes) data)
    {
        if (_disposed || accountService.MainAccount?.Id != data.accountId)
            return;

        mainSection?.Update();
    }

    private void MainAccountChanged(object? sender, EventArgs args)
    {
        if (_disposed)
            return;

        likeClicked = accountService.MainAccount != null && feedService.AccountReacted(Tree.Note.ReplaceableId ?? Tree.Note.Id, accountService.MainAccount.Id);
        
        mainSection?.Update();
    }

    private void NoteCountChanged(object? sender, (string eventId, EventDetailsCount delta) data)
    {
        if (_disposed || (Tree.Note.Id != data.eventId && Tree.Note.ReplaceableId != data.eventId))
            return;

        eventDetailsCount?.Add(data.delta);
        bottomPlaceholder?.Update();
    }

    private void NoteDeleted(object? sender, string eventId)
    {
        if (_disposed || Tree.Note.Id != eventId)
            return;

        Tree.Note.Deleted = true;
        mainSection?.Update();
    }

    private void NoteReacted(object? sender, (string eventId, string reactorId) data)
    {
        if (_disposed 
            || (Tree.Note.Id != data.eventId && Tree.Note.ReplaceableId != data.eventId) 
            || accountService.MainAccount == null
            || accountService.MainAccount.Id != data.reactorId)
            return;

        likeClicked = true;
        bottomPlaceholder?.Update();
    }

    private void HandleClick()
    {
        if (!NotClickable)
        {
            navigationManager.NavigateTo($"/note/{Tree.Note.Id}");
        }
    }

    protected override bool ShouldRender()
    {
        return false; // Never auto refresh
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        if (OnComponentUnload != null)
        {
            OnComponentUnload(this);
        }
        feedService.NoteCountChanged -= NoteCountChanged;
        feedService.NoteDeleted -= NoteDeleted;
        feedService.NoteReacted -= NoteReacted;
        accountService.AccountMutesChanged -= AccountMutesChanged;
        accountService.MainAccountChanged -= MainAccountChanged;
    }
    #endregion
}
