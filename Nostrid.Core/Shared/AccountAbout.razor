@code{
    [Parameter, EditorRequired]
    public string Id { get; set; } = null!;
}

@implements IDisposable

@using Nostrid.Data;
@using Nostrid.Model;

@inject AccountService accountService

@if (details?.About.IsNotNullOrEmpty() ?? false)
{
    <div class="text-break mb-3" style="margin-top: -.5rem;">@details?.About</div>
}

@code
{
    private AccountDetails? details;

    protected override void OnInitialized()
    {
        accountService.AccountDetailsChanged += AccountDetailsChanged;
    }

    protected override void OnParametersSet()
    {
        if (Id == null) return;
        accountService.AddDetailsNeeded(Id);
        details = accountService.GetAccountDetails(Id);
    }

    private void AccountDetailsChanged(object? sender, (string accountId, AccountDetails details) data)
    {
        if (data.accountId == Id)
        {
            details = data.details;
            InvokeAsync(() => StateHasChanged());
        }
    }

    #region Dispose
    private bool disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            disposed = true;
        }
    }

    private void Cleanup()
    {
        accountService.AccountDetailsChanged -= AccountDetailsChanged;
    }
    #endregion
}