@code {
    [Parameter, EditorRequired]
    public string Id { get; set; } = null!;

    [Parameter]
    public int Size { get; set; } = 48;

    [CascadingParameter]
    public Scripts? Scripts { get; set; }

    [Parameter]
    public EventCallback<string?> OnLoad { get; set; }
}

@implements IDisposable

@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;

@inject AccountService accountService

@if (details != null && details.PictureUrl.IsNotNullOrEmpty() && Uri.IsWellFormedUriString(details.PictureUrl, UriKind.Absolute))
{
    <img style="width:@(Size)px; height:@(Size)px" src="@details.PictureUrl" class="card-img-top rounded-999" alt=""
         @ref="image" @onload="HandleOnLoad" crossorigin="anonymous">
}
else if (Id.IsNotNullOrEmpty())
{
    <div style="width:@(Size)px; height:@(Size)px" class="rounded-999 overflow-hidden">
        @((MarkupString)Utils.ToSvgIdenticon(Id, Size))
    </div>
}

@code
{
    private ElementReference? image;
    private AccountDetails? details;

    protected override void OnInitialized()
    {
        accountService.AccountDetailsChanged += AccountDetailsChanged;
    }

    protected override void OnParametersSet()
    {
        if (Id == null) return;
        accountService.AddDetailsNeeded(Id);
        details = accountService.GetAccountDetails(Id);
    }

    private void AccountDetailsChanged(object? sender, (string accountId, AccountDetails details) data)
    {
        if (data.accountId == Id)
        {
            details = data.details;
            InvokeAsync(() => StateHasChanged());
        }
    }

    private async Task HandleOnLoad()
    {
        if (!OnLoad.HasDelegate) return;
        if (Scripts == null || image == null)
        {
            await OnLoad.InvokeAsync(null);
        }
        else
        {
            Scripts.InvokeAfterRender(async () =>
            {
                try
                {
                    var avgColor = await Scripts.InvokeAsync<string>("getAverageRGB", image);
                    await OnLoad.InvokeAsync(avgColor);
                }
                catch
                {
                    await OnLoad.InvokeAsync(null);
                }
            });
        }
    }

    #region Dispose
    private bool disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            disposed = true;
        }
    }

    private void Cleanup()
    {
        accountService.AccountDetailsChanged -= AccountDetailsChanged;
    }
    #endregion
}