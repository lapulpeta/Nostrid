@using System.Net.Mime;
@code{
    [Parameter, EditorRequired]
    public string Url { get; set; } = null!;

    [Parameter]
    public bool StopPropagation { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }
}

@if (mediaType == MediaType.Image)
{
    <img src="@Url" alt="Note attachment" crossorigin="anonymous" />
} 
else if (mediaType == MediaType.Video)
{
    <video controls crossorigin="anonymous">
        <source src="@Url" type="@mediaTypeHeader">
        Video not supported
    </video>
}
else if (mediaType == MediaType.Audio)
{
    <audio controls crossorigin="anonymous">
        <source src="@Url" type="@mediaTypeHeader">
        Audio not supported
    </audio>
}
else
{
    <NavLink href="@Url" @onclick:stopPropagation="StopPropagation">
        @if (ChildContent != null)
        {
            <text>@ChildContent</text>
        }
        else
        {
            <text>@Url</text>
        }
    </NavLink>
}

@code {

    enum MediaType
    {
        Other = 0,
        Image = 1,
        Video = 2,
        Audio = 3
    }

    private static string[] WellKnownHosts = new[]{ "https://void.cat" };

    private MediaType mediaType = AsyncLink.MediaType.Other;
    private string mediaTypeHeader = string.Empty;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (ChildContent is not null)
        {
            return;
        }

        Task.Run(async () =>
        {
            using (var client = new HttpClient())
            {
                try
                {
                    var method = WellKnownHosts.Any(s => Url.StartsWith(s)) ? HttpMethod.Get : HttpMethod.Head;
                    using (var response = await client.SendAsync(new HttpRequestMessage(method, Url), HttpCompletionOption.ResponseHeadersRead))
                    {
                        if (!response.IsSuccessStatusCode)
                        {
                            return;
                        }
                        mediaTypeHeader = response.Content.Headers.ContentType?.MediaType ?? string.Empty;
                        if (mediaTypeHeader.StartsWith("image"))
                        {
                            mediaType = MediaType.Image;
                        }
                        else if (mediaTypeHeader.StartsWith("video"))
                        {
                            mediaType = MediaType.Video;
                        }
                        else if (mediaTypeHeader.StartsWith("audio"))
                        {
                            mediaType = MediaType.Audio;
                        }
                        else
                        {
                            return;    
                        }
                        var task = InvokeAsync(() => StateHasChanged());
                    }
                }
                catch
                {
                }
            }
        });
    }
}