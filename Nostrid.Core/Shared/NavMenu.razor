@using Nostrid.Data.Relays;
@using Nostrid.Data;
@using Nostrid.Misc;

@inject RelayService relayService
@inject FeedService feedService
@inject EventDatabase eventDatabase
@inject AccountService accountService
@inject NotificationService notificationService
@inject DmService dmService
@inject IJSRuntime jsRuntime

@implements IDisposable

@code
{
	[Parameter]
	public RenderFragment? ChildContent { get; set; }

	[CascadingParameter]
	public Scripts? Scripts { get; set; }
}

<div class="d-flex flex-row flex-grow-1">

	<div class="offcanvas offcanvas-start" tabindex="-1" id="offcanvasMenu" aria-labelledby="offcanvasMenuLabel">
		<div class="offcanvas-header d-md-none">
			<button type="button" class="btn-close text-reset" data-bs-dismiss="offcanvas" aria-label="Close"></button>
		</div>
		<div class="offcanvas-body d-flex flex-column flex-grow-1 pt-0">
			<a class="d-none d-md-block py-3 text-center text-decoration-none " href="/">Nostrid</a>
			<nav class="flex-grow-1" style="min-width: 150px;">
				<ul class="nav nav-pills flex-column fs-5">
					<li class="nav-item pb-2">
						<NavLink class="nav-link text-nowrap bg-tertiary-hover" href="/feed" @onclick="HideOffCanvasMenu">
							<i class="bi bi-house display-inactive" aria-hidden="true"></i>
							<i class="bi bi-house-fill display-active" aria-hidden="true"></i>
							<span>Feed</span>
							<UpdatabableElement @ref="mentionsElement">
								@if (mentionsCount > 0)
								{
									<span class="badge rounded-pill bg-danger fs-8" style="vertical-align: 2px;">
										@mentionsCount
									</span>
								}
							</UpdatabableElement>
						</NavLink>
					</li>
					@*<li class="nav-item pb-2">
						<NavLink class="nav-link text-nowrap bg-tertiary-hover" href="/favorites" @onclick="HideOffCanvasMenu">
							<i class="bi bi-heart display-inactive" aria-hidden="true"></i>
							<i class="bi bi-heart-fill display-active" aria-hidden="true"></i>
							<span>Favorites</span>
						</NavLink>
					</li>*@
					<UpdatabableElement @ref="@loggedInElements">
						@if (accountService.MainAccount != null)
						{
							@foreach (var feedSource in feedService.GetFeedSources(accountService.MainAccount.Id))
							{
								<li class="nav-item pb-2">
									<NavLink class="nav-link text-nowrap bg-tertiary-hover" href="@($"/favorite/feed/{feedSource.Id}")" @onclick="HideOffCanvasMenu">
										<span class="bi bi-house-heart-fill" aria-hidden="true"></span> @string.Join(", ", feedSource.Hashtags.ToArray())
									</NavLink>
								</li>
							}
							<li class="nav-item pb-2">
								<NavLink class="nav-link text-nowrap bg-tertiary-hover" href="dms" @onclick="HideOffCanvasMenu">
									<i class="bi bi-envelope display-inactive" aria-hidden="true"></i>
									<i class="bi bi-envelope-fill display-active" aria-hidden="true"></i>
									<span>Messages</span>
									<UpdatabableElement @ref="dmElement">
										@if (unreadDmCount > 0)
										{
											<span class="badge rounded-pill bg-danger fs-8" style="vertical-align: 2px;">
												@unreadDmCount
											</span>
										}
									</UpdatabableElement>
								</NavLink>
							</li>
						}
					</UpdatabableElement>
					<li class="nav-item pb-2">
						<NavLink class="nav-link text-nowrap bg-tertiary-hover" href="explore" @onclick="HideOffCanvasMenu">
							<svg style="width: 17.5px; height: 17.5px; margin-top: -4px;" class="display-inactive" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
								<path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
							</svg>
							<svg style="width: 17.5px; height: 17.5px; margin-top: -4px;" class="display-active" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
								<path d="M 6.5 13 C 7.883 13.002 9.231 12.561 10.345 11.742 L 10.344 11.742 C 10.374 11.782 10.406 11.82 10.442 11.857 L 14.292 15.707 C 14.836 16.252 15.766 16.003 15.966 15.259 C 16.058 14.914 15.96 14.546 15.707 14.293 L 11.857 10.443 C 11.821 10.407 11.783 10.373 11.742 10.343 C 12.561 9.229 13.002 7.882 13 6.5 C 12.999 2.911 10.089 0.001 6.5 0 C 1.496 0 -1.631 5.417 0.871 9.75 C 2.032 11.761 4.178 13 6.5 13 Z" />
							</svg>
							<span>Explore</span>
						</NavLink>
					</li>
					<li class="nav-item pb-2">
						<NavLink class="nav-link text-nowrap bg-tertiary-hover" href="channels" @onclick="HideOffCanvasMenu">
							<i class="bi bi-tv display-inactive" aria-hidden="true"></i>
							<i class="bi bi-tv-fill display-active" aria-hidden="true"></i>
							<span>Channels</span>
						</NavLink>
					</li>
					<li class="nav-item pb-2">
						<NavLink class="nav-link text-nowrap bg-tertiary-hover" href="config" @onclick="HideOffCanvasMenu">
							<i class="bi bi-gear display-inactive" aria-hidden="true"></i>
							<i class="bi bi-gear-fill display-active" aria-hidden="true"></i>
							<span>Settings</span>
						</NavLink>
					</li>
					<UpdatabableElement @ref="loggedInElements2">
						@if (accountService.MainAccount != null)
						{
							<li class="nav-item pb-2">
								<NavLink class="nav-link text-nowrap bg-tertiary-hover" href="@($"account/{accountService.MainAccount.Id}")" @onclick="HideOffCanvasMenu">
									<i class="bi bi-person display-inactive" aria-hidden="true"></i>
									<i class="bi bi-person-fill display-active" aria-hidden="true"></i>
									<span>Me</span>
								</NavLink>
							</li>
						}
					</UpdatabableElement>
					<li class="nav-item pb-2">
						<NavLink class="nav-link text-nowrap bg-tertiary-hover" href="accounts" @onclick="HideOffCanvasMenu">
							<i class="bi bi-people display-inactive" aria-hidden="true"></i>
							<i class="bi bi-people-fill display-active" aria-hidden="true"></i>
							<span>Accounts</span>
						</NavLink>
					</li>
				</ul>
			</nav>
			<div>
				<div class="text-nowrap">
					<UpdatabableElement @ref="relayElements">
						@{
							<text>Relays</text>
							if (relayService.RelaysMonitor.IsAuto)
							{
								<span> (Auto)</span>
							}
							<text>: </text>
						}
						@relayService.ConnectedRelays/@relayService.RelaysMonitor.MaxRelays/@relayService.RelaysMonitor.PendingRelays
						<i class="bi bi-question-circle-fill" data-bs-toggle="tooltip" data-bs-placement="top"
							data-bs-title="connected / max to use / stand by"></i>
						@if (!relayService.IsRestarting)
						{
							<div class="d-inline-block">
								<button class="btn btn-sm btn-secondary rounded-circle d-flex align-items-center justify-content-center ms-1" 
								@onclick="@ChangeRelays" style="width: 15px; height: 15px;"> 
									<i class="bi bi-arrow-clockwise"></i>
								</button>
							</div>
						}
						@*<environment include="Development">
							<div>
								Rate Limited: @relayService.RateLimitedRelays<br />
								Filters: @relayService.FiltersCount
							</div>
						</environment>*@
					</UpdatabableElement>
				</div>
				<div class="fs-7 text-secondary">Version: @Utils.GetCurrentVersion()</div>
			</div>
		</div>
	</div>

	<div class="d-flex flex-column flex-grow-1">
		
		<div>
			<nav class="navbar top-navbar navbar-light bg-body-tertiary d-md-none px-2 py-1 border-bottom bg-opacity-95">
				<div class="flex-grow-1 d-flex flex-row justify-content-between align-items-center">
					<NavLink class="nav-link" href="#">
						<UpdatabableElement @ref="loggedInElements3">
							<AccountPicture Id="@accountService.MainAccount?.Id" Size="35"></AccountPicture>
						</UpdatabableElement>
					</NavLink>
					<div class="flex-grow-1 text-center">
						<a class="navbar-brand m-0" href="/">Nostrid</a>
					</div>
					<button title="Navigation menu" class="position-relative navbar-toggler p-1 m-0" data-bs-toggle="offcanvas" data-bs-target="#offcanvasMenu" aria-controls="offcanvasMenu" style="margin: 12px 0;">
						<span class="navbar-toggler-icon"></span>
					</button>
				</div>
			</nav>
		</div>

		<div @ref="container" class="position-relative d-flex flex-column flex-grow-1 overflow-y-auto">
			@ChildContent
		</div>

		<nav class="navbar navbar-light bg-body-tertiary d-md-none p-0 border-top">
			<ul class="nav flex-grow-1 d-flex text-center">
				<li class="nav-item flex-grow-1">
					<NavLink class="nav-link fs-4 text-body" href="/feed">
						<span class="position-relative">
							<i class="bi bi-house display-inactive" aria-hidden="true"></i>
							<i class="bi bi-house-fill display-active" aria-hidden="true"></i>
							<UpdatabableElement @ref="mentionsElement2">
							@if (mentionsCount > 0)
							{
								<span class="position-absolute top-100 start-100 p-1 translate-middle bg-danger border rounded-circle"
									  style="transform: translate(-60%, -100%) !important;">
									<span class="visually-hidden">New alerts</span>
								</span>
							}
							</UpdatabableElement>
						</span>
					</NavLink>
				</li>
				<li class="nav-item flex-grow-1">
					<NavLink class="nav-link fs-4 text-body" href="compose">
						<i class="bi bi-send display-inactive" aria-hidden="true"></i>
						<i class="bi bi-send-fill display-active" aria-hidden="true"></i>
					</NavLink>
				</li>
				<li class="nav-item flex-grow-1">
					<NavLink class="nav-link fs-4 text-body" href="explore">
						<svg style="width: 17.5px; height: 17.5px; margin-top: -4px;" class="display-inactive" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16">
							<path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
						</svg>
						<svg style="width: 17.5px; height: 17.5px; margin-top: -4px;" class="display-active" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 16 16">
							<path d="M 6.5 13 C 7.883 13.002 9.231 12.561 10.345 11.742 L 10.344 11.742 C 10.374 11.782 10.406 11.82 10.442 11.857 L 14.292 15.707 C 14.836 16.252 15.766 16.003 15.966 15.259 C 16.058 14.914 15.96 14.546 15.707 14.293 L 11.857 10.443 C 11.821 10.407 11.783 10.373 11.742 10.343 C 12.561 9.229 13.002 7.882 13 6.5 C 12.999 2.911 10.089 0.001 6.5 0 C 1.496 0 -1.631 5.417 0.871 9.75 C 2.032 11.761 4.178 13 6.5 13 Z" />
						</svg>
					</NavLink>
				</li>
				<li class="nav-item flex-grow-1">
					<NavLink class="nav-link fs-4 text-body" href="dms">
						<span class="position-relative">
							<i class="bi bi-envelope display-inactive" aria-hidden="true"></i>
							<i class="bi bi-envelope-fill display-active" aria-hidden="true"></i>
							<UpdatabableElement @ref="dmElement2">
								@if (unreadDmCount > 0)
								{
									<span class="position-absolute top-100 start-100 p-1 translate-middle bg-danger border rounded-circle"
										  style="transform: translate(-60%, -100%) !important;">
										<span class="visually-hidden">New alerts</span>
									</span>
								}
							</UpdatabableElement>
						</span>
					</NavLink>
				</li>
			</ul>
		</nav>

	</div>
</div>

@code {

	private int mentionsCount, unreadDmCount;
	private UpdatabableElement? mentionsElement, mentionsElement2, loggedInElements, loggedInElements2, loggedInElements3, relayElements, dmElement, dmElement2;
	private ElementReference? container;

	private void NotificationNumberChanged(object? sender, (int mentionsCount, int unreadDmCount) data)
	{
		mentionsCount = data.mentionsCount;
		unreadDmCount = data.unreadDmCount;
		mentionsElement?.Update();
		mentionsElement2?.Update();
		dmElement?.Update();
		dmElement2?.Update();
	}

	private void MainAccountChanged(object? sender, EventArgs args)
	{
		loggedInElements?.Update();
		loggedInElements2?.Update();
		loggedInElements3?.Update();
	}

	private void ClientStatusChanged(object? sender, (long, bool) data)
	{
		relayElements?.Update();
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		notificationService.NotificationNumberChanged += NotificationNumberChanged;
		accountService.MainAccountChanged += MainAccountChanged;
		relayService.ClientStatusChanged += ClientStatusChanged;
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			notificationService.Update();

			if (container != null)
			{
				Scripts?.InvokeAfterRender(async () => await Scripts.InvokeVoidAsync("initializeNavMenu", container));
			}
		}
	}

	private void ChangeRelays()
	{
		Task.Run(() => relayService.RestartNostrClients());
	}

	private async Task HideOffCanvasMenu()
	{
		if (Scripts != null)
		{
			await Scripts.InvokeVoidAsync("hideOffcanvasMenu");
		}
	}

	#region Dispose
	private bool _disposed;

	public void Dispose() => Dispose(true);

	protected virtual void Dispose(bool disposing)
	{
		if (!_disposed)
		{
			if (disposing)
			{
				Cleanup();
			}

			_disposed = true;
		}
	}

	private void Cleanup()
	{
		notificationService.NotificationNumberChanged -= NotificationNumberChanged;
		accountService.MainAccountChanged -= MainAccountChanged;
		relayService.ClientStatusChanged -= ClientStatusChanged;
	}
	#endregion
}
