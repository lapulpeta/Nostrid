@implements IDisposable

@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;

@inject AccountService accountService
@inject NoteProcessor noteProcessor
@inject ConfigService configService
@inject EventDatabase eventDatabase
@inject RelayService relayService
@inject NavigationManager navigationManager
@inject FeedService feedService

@code{
    [Parameter, EditorRequired]
    public Event Event { get; set; } = null!;

    [Parameter]
    public bool ShowReplyingTo { get; set; }

    [Parameter]
    public bool Expanded { get; set; }

    [Parameter]
    public RenderFragment? LeftPlaceholder { get; set; }

    [Parameter]
    public RenderFragment? BottomPlaceholder { get; set; }
}

<div class="d-flex flex-row">
    <div class="d-flex flex-column flex-shrink-0">
        <a href="/account/@Event?.PublicKey" @onclick:stopPropagation="true">
            <AccountPicture Id="@Event?.PublicKey"></AccountPicture>
        </a>
        @LeftPlaceholder
    </div>
    <div class="flex-grow-1 ms-2" style="width: 0px;">
        <p class="mb-1">
            <a href="/account/@Event?.PublicKey" @onclick:stopPropagation="true" class="fw-bold mb-1">
                <AccountName Id="@Event?.PublicKey"></AccountName>
            </a>
            <span class="text-secondary">
                <span>·</span>
                <span><TimeStamp DateSeconds="@(Event?.CreatedAtCurated ?? 0)" /></span>
                @if (showDifficulty)
                {
                    <span>&nbsp;·</span>
                    <span>diff @Event?.Difficulty</span>
                    @if (Event?.HasPow ?? false)
                    {
                        <span> 🏋️</span>
                    }
                }
                @if (ShowReplyingTo && Event?.ReplyToId != null)
                {
                    <span>&nbsp;·</span>
                    <span class="d-inline-block">
                        Replying to
                        <a href="/note/@Event?.ReplyToId" @onclick:stopPropagation="true">
                            @ByteTools.EventIdToString(Event?.ReplyToId ?? string.Empty, true)
                        </a>
                    </span>
                }
                @if (Event?.RepostEventId != null)
                {
                    <span>&nbsp;·</span>
                    <span class="d-inline-block">
                        Reposted
                        <a href="/note/@Event.RepostEventId" @onclick:stopPropagation="true">
                            @ByteTools.PubkeyToNote(Event.RepostEventId, true)
                        </a>
                    </span>
                }
            </span>
        </p>
        <UpdatabableElement @ref="textContent">
            <div class="note-content-wrapper @(!allVisible ? "to-expand" : "") @(Expanded ? "expanded" : "")">
                @switch (Event?.Kind)
                {
                    case NostrKind.ChannelMessage:
                    case NostrKind.Text:
                    case NostrKind.DM:
                    case NostrKind.LongContent:
                        <div class="text-break note-content">
                            @content
                        </div>
                        break;
                    case NostrKind.Badge:
                        <div class="d-inline-block p-2 border rounded-2 note-content text-break text-center"
                             style="border-color: rgba(var(--bs-secondary-rgb)) !important;">
                            <div class="fs-5">
                                <i class="bi bi-star me-1"></i>
                                @Event.TagData("name")
                                <i class="ms-1 bi bi-star"></i>
                            </div>
                            <div class="fst-italic">@Event.TagData("description")</div>
                            <div class="d-flex flex-row justify-content-center mt-1"><AsyncLink Url="@Event.TagData("thumb")"></AsyncLink></div>
                        </div>
                        break;
                    case NostrKind.Repost:
                        if (Event.RepostEventId != null)
                        {
                            var repostEvent = eventDatabase.GetEventOrNull(Event.RepostEventId);
                            if (repostEvent == null)
                            {
                                waitingForRepostedEvent = true;
                            }
                            else
                            {
                                <div role="button" class="border border-secondary rounded-2 p-2"
                                     @onclick="@(() => navigationManager.NavigateTo($"/note/{repostEvent.Id}"))" @onclick:stopPropagation="true">
                                    <EventViewer Event="repostEvent" ShowReplyingTo="true" Expanded="true" />
                                </div>
                            }
                        }
                        break;
                }
                <ElementObserver OnIntersecting="Intersecting"></ElementObserver>
            </div>
            @if (!allVisible)
            {
                <a href="#" role="button"
                    @onclick="@ToggleExpand" 
                    @onclick:stopPropagation="true"
                    @onclick:preventDefault="true">See more...</a>
            }
        </UpdatabableElement>
        @BottomPlaceholder
    </div>
</div>

@code {
    private bool showDifficulty => configService.MainConfig.ShowDifficulty;
    private UpdatabableElement? textContent;
    private bool waitingForRepostedEvent;
    private RenderFragment? content;
    private bool allVisible = true;

    protected override async Task OnParametersSetAsync()
    {
        if (Event == null) return;

        string? rawContent;
        if (Event?.Kind == NostrKind.DM)
        {
            var pubkey = Event.PublicKey == accountService.MainAccount.Id ? Event.GetMentionsIds('p').FirstOrDefault() : Event.PublicKey;
            rawContent = await accountService.MainAccountSigner.DecryptNip04(pubkey, Event.Content);
        }
        else
        {
            rawContent = Event?.Content;
        }
        content = noteProcessor.GetContent(rawContent ?? string.Empty, Event?.GetMentions());

        Cleanup();

        feedService.AddDetailsNeeded(Event.Id, Event.ReplyToId, Event.ReplyToRootId, Event.RepostEventId, Event.ReplaceableId);

        if (Event.RepostEventId.IsNotNullOrEmpty())
        {
            feedService.NotesReceived += NotesReceived;
        }
    }

    private void NotesReceived(object? sender, (string _, IEnumerable<Event> events) data)
    {
        if (_disposed || !waitingForRepostedEvent)
        {
            return;
        }

        var repostEventId = data.events.FirstOrDefault(e => e.Id == Event.RepostEventId);
        if (repostEventId != null && textContent != null)
        {
            textContent.Update();
            waitingForRepostedEvent = false;
        }
    }

    private void Intersecting(object? sender, bool interescting)
    {
        allVisible = interescting;
        textContent?.Update();
    }

    private void ToggleExpand()
    {
        Expanded = !Expanded;
        if (Expanded) allVisible = true;
        textContent?.Update();
    }

    #region Dispose
    private bool _disposed;

    public void Dispose() => Dispose(true);

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                Cleanup();
            }

            _disposed = true;
        }
    }

    private void Cleanup()
    {
        feedService.RemoveDetailsNeeded(Event.Id, Event.ReplyToId, Event.ReplyToRootId, Event.RepostEventId, Event.ReplaceableId);
        feedService.NotesReceived -= NotesReceived;
    }
    #endregion
}