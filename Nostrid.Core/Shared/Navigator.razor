@using Nostrid.Data;
@using Nostrid.Misc;
@using Nostrid.Model;

@inject NavigationManager NavigationManager
@inject EventDatabase eventDatabase

<EditForm Model="@textInput" OnValidSubmit="@GoToEventSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="d-flex flex-row align-items-center">
        <InputText class="form-control glow-0 border-0 py-3 flex-grow-1" style="outline: none;" @bind-Value="textInput.Text"
                   placeholder="Enter npub, naddr, nevent, note, hex ID, NIP-05, or one or more hashtags" />
        @if (invalidInput)
        {
            <i class="bi bi-exclamation-circle fs-5 text-danger"></i>
        }
        <button disabled="@working" class="btn btn-link fs-2 text-body" type="submit"><i class="bi bi-arrow-right"></i></button>
    </div>
</EditForm>

<ConfirmationModal @ref="confirmationModal" />

@code {
    private TextInput textInput = new();
    private bool invalidInput, working;
    private ConfirmationModal? confirmationModal;

    private async Task GoToEventSubmit()
    {
        var input = textInput.Text?.Trim() ?? string.Empty;

        working = true;
        await InvokeAsync(StateHasChanged);

        try
        {

            // Check hex
            if (Utils.IsValidNostrId(input))
            {
                if (eventDatabase.TryDetermineHexType(input, out var type))
                {
                    switch (type)
                    {
                        case IdType.Account:
                            NavigationManager.NavigateTo($"/account/{input}");
                            return;
                        case IdType.Channel:
                            NavigationManager.NavigateTo($"/channel/{input}");
                            return;
                        case IdType.Event:
                            NavigationManager.NavigateTo($"/note/{input}");
                            return;
                    }
                }
                confirmationModal?.Show(
                    ConfirmationModal.Options.Create(
                        "This seems to be a hex ID but we can't figure out the type",
                        "Select ID type",
                        ConfirmationModal.Options.Button.CreateButton("Cancel", null),
                        ConfirmationModal.Options.Button.CreateButton("Account", () =>
                        {
                            NavigationManager.NavigateTo($"/account/{input}");
                        }),
                        ConfirmationModal.Options.Button.CreateButton("Channel", () =>
                        {
                            NavigationManager.NavigateTo($"/channel/{input}");
                        }),
                        ConfirmationModal.Options.Button.CreateButton("Event", () =>
                        {
                            NavigationManager.NavigateTo($"/note/{input}");
                        })
                    )
                );
                return;
            }

            // Check bech32
            var (prefix, pubkey) = ByteTools.DecodeBech32(input);
            if (prefix != null && Utils.IsValidNostrId(pubkey))
            {
                switch (prefix)
                {
                    case "npub":
                        NavigationManager.NavigateTo($"/account/{pubkey}");
                        return;
                    case "note":
                        NavigationManager.NavigateTo($"/note/{pubkey}");
                        return;
                    default:
                        invalidInput = true;
                        return;
                }
            }

            // Check TVL bech32
            if (ByteTools.TryDecodeTvlBech32(input, out var tvlEntity))
            {
                switch (tvlEntity)
                {
                    case Nevent nevent:
                    case Naddr naddr:
                        NavigationManager.NavigateTo($"/note/{input}");
                        return;
                    default:
                        invalidInput = true;
                        return;
                }
            }

            // Check tag
            var words = input.Split(" ");
            var hashtags = new List<string>();
            foreach (var word in words)
            {
                if (Utils.IsHashTag(word))
                    hashtags.Add(Utils.GetHashTag(word));
                else if (Utils.IsHashTag("#" + word))
                    hashtags.Add(Utils.GetHashTag("#" + word));
            }
            if (hashtags.Any())
            {
                NavigationManager.NavigateTo($"feed/tag/{string.Join(",", hashtags.ToArray())}");
                return;
            }

            // Check replaceable ID
            if (input.IsReplaceableIdStrict())
            {
                NavigationManager.NavigateTo($"/note/{input}");
                return;
            }

            // Check NIP-05
            if (Nip05.IsValidNip05(input))
            {
                (_, _, pubkey) = await Nip05.IdToPubkey(input);
                if (pubkey.IsNotNullOrEmpty())
                {
                    NavigationManager.NavigateTo($"/account/{pubkey}");
                    return;
                }
            }

            invalidInput = true;
        }
        finally
        {
            working = false;
        }
    }
}
